
lcd_display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003374  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08003480  08003480  00004480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003534  08003534  0000505c  2**0
                  CONTENTS
  4 .ARM          00000000  08003534  08003534  0000505c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003534  08003534  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003534  08003534  00004534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003538  08003538  00004538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800353c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  2000005c  08003598  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08003598  0000523c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004e6d  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017a0  00000000  00000000  00009ef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000668  00000000  00000000  0000b698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004a8  00000000  00000000  0000bd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172f4  00000000  00000000  0000c1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007b89  00000000  00000000  0002349c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000820dd  00000000  00000000  0002b025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ad102  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c78  00000000  00000000  000ad148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000aedc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003468 	.word	0x08003468

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003468 	.word	0x08003468

0800014c <lcdSetup>:
uint16_t		lcdRsPin;
uint16_t		lcdEnPin;
uint16_t		lcdDataPin[8];

void lcdSetup(GPIO_TypeDef *PORT, uint16_t RS, uint16_t En, uint16_t D0,uint16_t D1,uint16_t D2,uint16_t D3,uint16_t D4,uint16_t D5,uint16_t D6,uint16_t D7 )
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	4608      	mov	r0, r1
 8000156:	4611      	mov	r1, r2
 8000158:	461a      	mov	r2, r3
 800015a:	4603      	mov	r3, r0
 800015c:	817b      	strh	r3, [r7, #10]
 800015e:	460b      	mov	r3, r1
 8000160:	813b      	strh	r3, [r7, #8]
 8000162:	4613      	mov	r3, r2
 8000164:	80fb      	strh	r3, [r7, #6]
// Assign Pin values to global variables
	lcdPort=PORT;
 8000166:	4a13      	ldr	r2, [pc, #76]	@ (80001b4 <lcdSetup+0x68>)
 8000168:	68fb      	ldr	r3, [r7, #12]
 800016a:	6013      	str	r3, [r2, #0]
	lcdRsPin=RS;
 800016c:	4a12      	ldr	r2, [pc, #72]	@ (80001b8 <lcdSetup+0x6c>)
 800016e:	897b      	ldrh	r3, [r7, #10]
 8000170:	8013      	strh	r3, [r2, #0]
	lcdEnPin=En;
 8000172:	4a12      	ldr	r2, [pc, #72]	@ (80001bc <lcdSetup+0x70>)
 8000174:	893b      	ldrh	r3, [r7, #8]
 8000176:	8013      	strh	r3, [r2, #0]
	lcdDataPin[0]=D0;
 8000178:	4a11      	ldr	r2, [pc, #68]	@ (80001c0 <lcdSetup+0x74>)
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	8013      	strh	r3, [r2, #0]
	lcdDataPin[1]=D1;
 800017e:	4a10      	ldr	r2, [pc, #64]	@ (80001c0 <lcdSetup+0x74>)
 8000180:	8b3b      	ldrh	r3, [r7, #24]
 8000182:	8053      	strh	r3, [r2, #2]
	lcdDataPin[2]=D2;
 8000184:	4a0e      	ldr	r2, [pc, #56]	@ (80001c0 <lcdSetup+0x74>)
 8000186:	8bbb      	ldrh	r3, [r7, #28]
 8000188:	8093      	strh	r3, [r2, #4]
	lcdDataPin[3]=D3;
 800018a:	4a0d      	ldr	r2, [pc, #52]	@ (80001c0 <lcdSetup+0x74>)
 800018c:	8c3b      	ldrh	r3, [r7, #32]
 800018e:	80d3      	strh	r3, [r2, #6]
	lcdDataPin[4]=D4;
 8000190:	4a0b      	ldr	r2, [pc, #44]	@ (80001c0 <lcdSetup+0x74>)
 8000192:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000194:	8113      	strh	r3, [r2, #8]
	lcdDataPin[5]=D5;
 8000196:	4a0a      	ldr	r2, [pc, #40]	@ (80001c0 <lcdSetup+0x74>)
 8000198:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800019a:	8153      	strh	r3, [r2, #10]
	lcdDataPin[6]=D6;
 800019c:	4a08      	ldr	r2, [pc, #32]	@ (80001c0 <lcdSetup+0x74>)
 800019e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80001a0:	8193      	strh	r3, [r2, #12]
	lcdDataPin[7]=D7;
 80001a2:	4a07      	ldr	r2, [pc, #28]	@ (80001c0 <lcdSetup+0x74>)
 80001a4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80001a6:	81d3      	strh	r3, [r2, #14]

}
 80001a8:	bf00      	nop
 80001aa:	3714      	adds	r7, #20
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bc80      	pop	{r7}
 80001b0:	4770      	bx	lr
 80001b2:	bf00      	nop
 80001b4:	20000078 	.word	0x20000078
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	2000007e 	.word	0x2000007e
 80001c0:	20000080 	.word	0x20000080

080001c4 <lcdEnable>:

void lcdEnable()
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	af00      	add	r7, sp, #0
	// Give a small 0 to 1 and 1 to 0 pulse on Enable pin to transfer port data
	HAL_GPIO_WritePin(lcdPort, lcdEnPin, GPIO_PIN_SET);
 80001c8:	4b0a      	ldr	r3, [pc, #40]	@ (80001f4 <lcdEnable+0x30>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a0a      	ldr	r2, [pc, #40]	@ (80001f8 <lcdEnable+0x34>)
 80001ce:	8811      	ldrh	r1, [r2, #0]
 80001d0:	2201      	movs	r2, #1
 80001d2:	4618      	mov	r0, r3
 80001d4:	f001 f853 	bl	800127e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80001d8:	2001      	movs	r0, #1
 80001da:	f000 fdad 	bl	8000d38 <HAL_Delay>
	HAL_GPIO_WritePin(lcdPort, lcdEnPin, GPIO_PIN_RESET);
 80001de:	4b05      	ldr	r3, [pc, #20]	@ (80001f4 <lcdEnable+0x30>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a05      	ldr	r2, [pc, #20]	@ (80001f8 <lcdEnable+0x34>)
 80001e4:	8811      	ldrh	r1, [r2, #0]
 80001e6:	2200      	movs	r2, #0
 80001e8:	4618      	mov	r0, r3
 80001ea:	f001 f848 	bl	800127e <HAL_GPIO_WritePin>

}
 80001ee:	bf00      	nop
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	20000078 	.word	0x20000078
 80001f8:	2000007e 	.word	0x2000007e

080001fc <lcdWrite>:

void lcdWrite(uint8_t data)
//	Writes one byte of data to the LCD Pins
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b084      	sub	sp, #16
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<8;i++)
 8000206:	2300      	movs	r3, #0
 8000208:	60fb      	str	r3, [r7, #12]
 800020a:	e01f      	b.n	800024c <lcdWrite+0x50>
	{
		if(data & (1<<i))
 800020c:	79fa      	ldrb	r2, [r7, #7]
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	fa42 f303 	asr.w	r3, r2, r3
 8000214:	f003 0301 	and.w	r3, r3, #1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d00a      	beq.n	8000232 <lcdWrite+0x36>
			HAL_GPIO_WritePin(lcdPort, lcdDataPin[i], GPIO_PIN_SET);
 800021c:	4b10      	ldr	r3, [pc, #64]	@ (8000260 <lcdWrite+0x64>)
 800021e:	6818      	ldr	r0, [r3, #0]
 8000220:	4a10      	ldr	r2, [pc, #64]	@ (8000264 <lcdWrite+0x68>)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000228:	2201      	movs	r2, #1
 800022a:	4619      	mov	r1, r3
 800022c:	f001 f827 	bl	800127e <HAL_GPIO_WritePin>
 8000230:	e009      	b.n	8000246 <lcdWrite+0x4a>
		else
			HAL_GPIO_WritePin(lcdPort, lcdDataPin[i], GPIO_PIN_RESET);
 8000232:	4b0b      	ldr	r3, [pc, #44]	@ (8000260 <lcdWrite+0x64>)
 8000234:	6818      	ldr	r0, [r3, #0]
 8000236:	4a0b      	ldr	r2, [pc, #44]	@ (8000264 <lcdWrite+0x68>)
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800023e:	2200      	movs	r2, #0
 8000240:	4619      	mov	r1, r3
 8000242:	f001 f81c 	bl	800127e <HAL_GPIO_WritePin>
	for(int i=0;i<8;i++)
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	3301      	adds	r3, #1
 800024a:	60fb      	str	r3, [r7, #12]
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	2b07      	cmp	r3, #7
 8000250:	dddc      	ble.n	800020c <lcdWrite+0x10>
	}
	lcdEnable();
 8000252:	f7ff ffb7 	bl	80001c4 <lcdEnable>
}
 8000256:	bf00      	nop
 8000258:	3710      	adds	r7, #16
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	20000078 	.word	0x20000078
 8000264:	20000080 	.word	0x20000080

08000268 <lcdCommand>:

void lcdCommand(uint8_t command)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	4603      	mov	r3, r0
 8000270:	71fb      	strb	r3, [r7, #7]
//	Sends Command data to LCD
	HAL_GPIO_WritePin(lcdPort, lcdRsPin, GPIO_PIN_RESET);	// Set RS to 0 for commands
 8000272:	4b08      	ldr	r3, [pc, #32]	@ (8000294 <lcdCommand+0x2c>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	4a08      	ldr	r2, [pc, #32]	@ (8000298 <lcdCommand+0x30>)
 8000278:	8811      	ldrh	r1, [r2, #0]
 800027a:	2200      	movs	r2, #0
 800027c:	4618      	mov	r0, r3
 800027e:	f000 fffe 	bl	800127e <HAL_GPIO_WritePin>
	lcdWrite(command);
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	4618      	mov	r0, r3
 8000286:	f7ff ffb9 	bl	80001fc <lcdWrite>
}
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	20000078 	.word	0x20000078
 8000298:	2000007c 	.word	0x2000007c

0800029c <lcdInit>:

void lcdInit()
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	lcdCommand(0x30); 	//  0 0 1 DL N F — — 0x30= 0011 0000 DL=1 means 8 Bit Mode
 80002a0:	2030      	movs	r0, #48	@ 0x30
 80002a2:	f7ff ffe1 	bl	8000268 <lcdCommand>
	HAL_Delay(10);
 80002a6:	200a      	movs	r0, #10
 80002a8:	f000 fd46 	bl	8000d38 <HAL_Delay>
	lcdCommand(0x30);
 80002ac:	2030      	movs	r0, #48	@ 0x30
 80002ae:	f7ff ffdb 	bl	8000268 <lcdCommand>
	HAL_Delay(10);
 80002b2:	200a      	movs	r0, #10
 80002b4:	f000 fd40 	bl	8000d38 <HAL_Delay>
	lcdCommand(0x30);
 80002b8:	2030      	movs	r0, #48	@ 0x30
 80002ba:	f7ff ffd5 	bl	8000268 <lcdCommand>
	HAL_Delay(10);
 80002be:	200a      	movs	r0, #10
 80002c0:	f000 fd3a 	bl	8000d38 <HAL_Delay>
	lcdCommand(0x38);	// 0 0 0 0 1 DL N F — — 0x38= 0011 1000 N=1 means 2 or more lines
 80002c4:	2038      	movs	r0, #56	@ 0x38
 80002c6:	f7ff ffcf 	bl	8000268 <lcdCommand>
	HAL_Delay(10);
 80002ca:	200a      	movs	r0, #10
 80002cc:	f000 fd34 	bl	8000d38 <HAL_Delay>
	lcdCommand(0x0E);	// 0 0 0 0 1 D C B		0x0E= 0000 1110 D=1 Display ON, C=1 Cursor ON
 80002d0:	200e      	movs	r0, #14
 80002d2:	f7ff ffc9 	bl	8000268 <lcdCommand>
	HAL_Delay(10);
 80002d6:	200a      	movs	r0, #10
 80002d8:	f000 fd2e 	bl	8000d38 <HAL_Delay>

}
 80002dc:	bf00      	nop
 80002de:	bd80      	pop	{r7, pc}

080002e0 <lcdChar>:

void lcdChar(uint8_t ch)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	4603      	mov	r3, r0
 80002e8:	71fb      	strb	r3, [r7, #7]
//	Display One Byte of Data to LCD
	HAL_GPIO_WritePin(lcdPort, lcdRsPin, GPIO_PIN_SET);	// Set RS Pin 1 for Data
 80002ea:	4b08      	ldr	r3, [pc, #32]	@ (800030c <lcdChar+0x2c>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4a08      	ldr	r2, [pc, #32]	@ (8000310 <lcdChar+0x30>)
 80002f0:	8811      	ldrh	r1, [r2, #0]
 80002f2:	2201      	movs	r2, #1
 80002f4:	4618      	mov	r0, r3
 80002f6:	f000 ffc2 	bl	800127e <HAL_GPIO_WritePin>
	lcdWrite(ch);
 80002fa:	79fb      	ldrb	r3, [r7, #7]
 80002fc:	4618      	mov	r0, r3
 80002fe:	f7ff ff7d 	bl	80001fc <lcdWrite>
}
 8000302:	bf00      	nop
 8000304:	3708      	adds	r7, #8
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	20000078 	.word	0x20000078
 8000310:	2000007c 	.word	0x2000007c

08000314 <lcdString>:

void lcdString(char * string)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
//	Display a String of characters
	while(*string)
 800031c:	e006      	b.n	800032c <lcdString+0x18>
		lcdChar(*string++);
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	1c5a      	adds	r2, r3, #1
 8000322:	607a      	str	r2, [r7, #4]
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	4618      	mov	r0, r3
 8000328:	f7ff ffda 	bl	80002e0 <lcdChar>
	while(*string)
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d1f4      	bne.n	800031e <lcdString+0xa>
}
 8000334:	bf00      	nop
 8000336:	bf00      	nop
 8000338:	3708      	adds	r7, #8
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
	...

08000340 <lcdSetCursor>:
	sprintf(buffer,format,number);
	lcdString(buffer);
}

void lcdSetCursor(uint8_t row, uint8_t col)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	4603      	mov	r3, r0
 8000348:	460a      	mov	r2, r1
 800034a:	71fb      	strb	r3, [r7, #7]
 800034c:	4613      	mov	r3, r2
 800034e:	71bb      	strb	r3, [r7, #6]
//	Sets the cursor position
	HAL_GPIO_WritePin(lcdPort, lcdRsPin, GPIO_PIN_RESET);	// RS=0;
 8000350:	4b1a      	ldr	r3, [pc, #104]	@ (80003bc <lcdSetCursor+0x7c>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a1a      	ldr	r2, [pc, #104]	@ (80003c0 <lcdSetCursor+0x80>)
 8000356:	8811      	ldrh	r1, [r2, #0]
 8000358:	2200      	movs	r2, #0
 800035a:	4618      	mov	r0, r3
 800035c:	f000 ff8f 	bl	800127e <HAL_GPIO_WritePin>
	switch (row)
 8000360:	79fb      	ldrb	r3, [r7, #7]
 8000362:	2b03      	cmp	r3, #3
 8000364:	d826      	bhi.n	80003b4 <lcdSetCursor+0x74>
 8000366:	a201      	add	r2, pc, #4	@ (adr r2, 800036c <lcdSetCursor+0x2c>)
 8000368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800036c:	0800037d 	.word	0x0800037d
 8000370:	0800038b 	.word	0x0800038b
 8000374:	08000399 	.word	0x08000399
 8000378:	080003a7 	.word	0x080003a7
	{
	case 0:
		lcdWrite(0x80+col); break;
 800037c:	79bb      	ldrb	r3, [r7, #6]
 800037e:	3b80      	subs	r3, #128	@ 0x80
 8000380:	b2db      	uxtb	r3, r3
 8000382:	4618      	mov	r0, r3
 8000384:	f7ff ff3a 	bl	80001fc <lcdWrite>
 8000388:	e014      	b.n	80003b4 <lcdSetCursor+0x74>
	case 1:
		lcdWrite(0xC0+col); break;
 800038a:	79bb      	ldrb	r3, [r7, #6]
 800038c:	3b40      	subs	r3, #64	@ 0x40
 800038e:	b2db      	uxtb	r3, r3
 8000390:	4618      	mov	r0, r3
 8000392:	f7ff ff33 	bl	80001fc <lcdWrite>
 8000396:	e00d      	b.n	80003b4 <lcdSetCursor+0x74>
	case 2:
		lcdWrite(0x80+0x14+col); break;
 8000398:	79bb      	ldrb	r3, [r7, #6]
 800039a:	3b6c      	subs	r3, #108	@ 0x6c
 800039c:	b2db      	uxtb	r3, r3
 800039e:	4618      	mov	r0, r3
 80003a0:	f7ff ff2c 	bl	80001fc <lcdWrite>
 80003a4:	e006      	b.n	80003b4 <lcdSetCursor+0x74>
	case 3:
		lcdWrite(0xC0+0x14+col); break;
 80003a6:	79bb      	ldrb	r3, [r7, #6]
 80003a8:	3b2c      	subs	r3, #44	@ 0x2c
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	4618      	mov	r0, r3
 80003ae:	f7ff ff25 	bl	80001fc <lcdWrite>
 80003b2:	bf00      	nop
	}
}
 80003b4:	bf00      	nop
 80003b6:	3708      	adds	r7, #8
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	20000078 	.word	0x20000078
 80003c0:	2000007c 	.word	0x2000007c

080003c4 <displaytime>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void displaytime(void) {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b084      	sub	sp, #16
 80003c8:	af02      	add	r7, sp, #8
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80003ca:	2200      	movs	r2, #0
 80003cc:	492a      	ldr	r1, [pc, #168]	@ (8000478 <displaytime+0xb4>)
 80003ce:	482b      	ldr	r0, [pc, #172]	@ (800047c <displaytime+0xb8>)
 80003d0:	f001 fe06 	bl	8001fe0 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN); // Required to prevent shadow register issues
 80003d4:	2200      	movs	r2, #0
 80003d6:	492a      	ldr	r1, [pc, #168]	@ (8000480 <displaytime+0xbc>)
 80003d8:	4828      	ldr	r0, [pc, #160]	@ (800047c <displaytime+0xb8>)
 80003da:	f001 ff8f 	bl	80022fc <HAL_RTC_GetDate>

    int hour = sTime.Hours;
 80003de:	4b26      	ldr	r3, [pc, #152]	@ (8000478 <displaytime+0xb4>)
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	607b      	str	r3, [r7, #4]

    lcdSetCursor(0, 0);
 80003e4:	2100      	movs	r1, #0
 80003e6:	2000      	movs	r0, #0
 80003e8:	f7ff ffaa 	bl	8000340 <lcdSetCursor>

    if (format_flag == 0) {
 80003ec:	4b25      	ldr	r3, [pc, #148]	@ (8000484 <displaytime+0xc0>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d10c      	bne.n	800040e <displaytime+0x4a>
        // 24-hour format
        sprintf(buffer, "%02d:%02d:%02d", hour, sTime.Minutes, sTime.Seconds);
 80003f4:	4b20      	ldr	r3, [pc, #128]	@ (8000478 <displaytime+0xb4>)
 80003f6:	785b      	ldrb	r3, [r3, #1]
 80003f8:	461a      	mov	r2, r3
 80003fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000478 <displaytime+0xb4>)
 80003fc:	789b      	ldrb	r3, [r3, #2]
 80003fe:	9300      	str	r3, [sp, #0]
 8000400:	4613      	mov	r3, r2
 8000402:	687a      	ldr	r2, [r7, #4]
 8000404:	4920      	ldr	r1, [pc, #128]	@ (8000488 <displaytime+0xc4>)
 8000406:	4821      	ldr	r0, [pc, #132]	@ (800048c <displaytime+0xc8>)
 8000408:	f002 fb7e 	bl	8002b08 <siprintf>
 800040c:	e02d      	b.n	800046a <displaytime+0xa6>
    } else {
        // 12-hour format
        char period[] = "AM";
 800040e:	4a20      	ldr	r2, [pc, #128]	@ (8000490 <displaytime+0xcc>)
 8000410:	463b      	mov	r3, r7
 8000412:	6812      	ldr	r2, [r2, #0]
 8000414:	4611      	mov	r1, r2
 8000416:	8019      	strh	r1, [r3, #0]
 8000418:	3302      	adds	r3, #2
 800041a:	0c12      	lsrs	r2, r2, #16
 800041c:	701a      	strb	r2, [r3, #0]
        if (hour >= 12) {
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	2b0b      	cmp	r3, #11
 8000422:	dd0e      	ble.n	8000442 <displaytime+0x7e>
            if (hour > 12) hour -= 12;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	2b0c      	cmp	r3, #12
 8000428:	dd02      	ble.n	8000430 <displaytime+0x6c>
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	3b0c      	subs	r3, #12
 800042e:	607b      	str	r3, [r7, #4]
            strcpy(period, "PM");
 8000430:	4a18      	ldr	r2, [pc, #96]	@ (8000494 <displaytime+0xd0>)
 8000432:	463b      	mov	r3, r7
 8000434:	6812      	ldr	r2, [r2, #0]
 8000436:	4611      	mov	r1, r2
 8000438:	8019      	strh	r1, [r3, #0]
 800043a:	3302      	adds	r3, #2
 800043c:	0c12      	lsrs	r2, r2, #16
 800043e:	701a      	strb	r2, [r3, #0]
 8000440:	e004      	b.n	800044c <displaytime+0x88>
        } else if (hour == 0) {
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d101      	bne.n	800044c <displaytime+0x88>
            hour = 12; // Midnight case
 8000448:	230c      	movs	r3, #12
 800044a:	607b      	str	r3, [r7, #4]
        }

        sprintf(buffer, "%02d:%02d:%02d %s", hour, sTime.Minutes, sTime.Seconds, period);
 800044c:	4b0a      	ldr	r3, [pc, #40]	@ (8000478 <displaytime+0xb4>)
 800044e:	785b      	ldrb	r3, [r3, #1]
 8000450:	4619      	mov	r1, r3
 8000452:	4b09      	ldr	r3, [pc, #36]	@ (8000478 <displaytime+0xb4>)
 8000454:	789b      	ldrb	r3, [r3, #2]
 8000456:	461a      	mov	r2, r3
 8000458:	463b      	mov	r3, r7
 800045a:	9301      	str	r3, [sp, #4]
 800045c:	9200      	str	r2, [sp, #0]
 800045e:	460b      	mov	r3, r1
 8000460:	687a      	ldr	r2, [r7, #4]
 8000462:	490d      	ldr	r1, [pc, #52]	@ (8000498 <displaytime+0xd4>)
 8000464:	4809      	ldr	r0, [pc, #36]	@ (800048c <displaytime+0xc8>)
 8000466:	f002 fb4f 	bl	8002b08 <siprintf>
    }

    lcdString(buffer);
 800046a:	4808      	ldr	r0, [pc, #32]	@ (800048c <displaytime+0xc8>)
 800046c:	f7ff ff52 	bl	8000314 <lcdString>
}
 8000470:	bf00      	nop
 8000472:	3708      	adds	r7, #8
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	200000a4 	.word	0x200000a4
 800047c:	20000090 	.word	0x20000090
 8000480:	200000b0 	.word	0x200000b0
 8000484:	200000d4 	.word	0x200000d4
 8000488:	08003480 	.word	0x08003480
 800048c:	200000b4 	.word	0x200000b4
 8000490:	080034a8 	.word	0x080034a8
 8000494:	08003490 	.word	0x08003490
 8000498:	08003494 	.word	0x08003494

0800049c <alarmset>:

void alarmset(void) {
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af02      	add	r7, sp, #8
    if (alarm_flag) {
 80004a2:	4b48      	ldr	r3, [pc, #288]	@ (80005c4 <alarmset+0x128>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	f000 8088 	beq.w	80005bc <alarmset+0x120>
        HAL_RTC_GetAlarm(&hrtc, &sAlarm, RTC_ALARM_A, RTC_FORMAT_BIN);
 80004ac:	2300      	movs	r3, #0
 80004ae:	2200      	movs	r2, #0
 80004b0:	4945      	ldr	r1, [pc, #276]	@ (80005c8 <alarmset+0x12c>)
 80004b2:	4846      	ldr	r0, [pc, #280]	@ (80005cc <alarmset+0x130>)
 80004b4:	f002 f810 	bl	80024d8 <HAL_RTC_GetAlarm>

        lcdSetCursor(0, 0);
 80004b8:	2100      	movs	r1, #0
 80004ba:	2000      	movs	r0, #0
 80004bc:	f7ff ff40 	bl	8000340 <lcdSetCursor>
        int hour = sTime.Hours;
 80004c0:	4b43      	ldr	r3, [pc, #268]	@ (80005d0 <alarmset+0x134>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	607b      	str	r3, [r7, #4]

           lcdSetCursor(0, 0);
 80004c6:	2100      	movs	r1, #0
 80004c8:	2000      	movs	r0, #0
 80004ca:	f7ff ff39 	bl	8000340 <lcdSetCursor>

           if (format_flag == 0) {
 80004ce:	4b41      	ldr	r3, [pc, #260]	@ (80005d4 <alarmset+0x138>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d10c      	bne.n	80004f0 <alarmset+0x54>
               // 24-hour format
               sprintf(buffer, "%02d:%02d:%02d", hour, sTime.Minutes, sTime.Seconds);
 80004d6:	4b3e      	ldr	r3, [pc, #248]	@ (80005d0 <alarmset+0x134>)
 80004d8:	785b      	ldrb	r3, [r3, #1]
 80004da:	461a      	mov	r2, r3
 80004dc:	4b3c      	ldr	r3, [pc, #240]	@ (80005d0 <alarmset+0x134>)
 80004de:	789b      	ldrb	r3, [r3, #2]
 80004e0:	9300      	str	r3, [sp, #0]
 80004e2:	4613      	mov	r3, r2
 80004e4:	687a      	ldr	r2, [r7, #4]
 80004e6:	493c      	ldr	r1, [pc, #240]	@ (80005d8 <alarmset+0x13c>)
 80004e8:	483c      	ldr	r0, [pc, #240]	@ (80005dc <alarmset+0x140>)
 80004ea:	f002 fb0d 	bl	8002b08 <siprintf>
 80004ee:	e02d      	b.n	800054c <alarmset+0xb0>
           } else {
               // 12-hour format
               char period[] = "AM";
 80004f0:	4a3b      	ldr	r2, [pc, #236]	@ (80005e0 <alarmset+0x144>)
 80004f2:	463b      	mov	r3, r7
 80004f4:	6812      	ldr	r2, [r2, #0]
 80004f6:	4611      	mov	r1, r2
 80004f8:	8019      	strh	r1, [r3, #0]
 80004fa:	3302      	adds	r3, #2
 80004fc:	0c12      	lsrs	r2, r2, #16
 80004fe:	701a      	strb	r2, [r3, #0]
               if (hour >= 12) {
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2b0b      	cmp	r3, #11
 8000504:	dd0e      	ble.n	8000524 <alarmset+0x88>
                   if (hour > 12) hour -= 12;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	2b0c      	cmp	r3, #12
 800050a:	dd02      	ble.n	8000512 <alarmset+0x76>
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	3b0c      	subs	r3, #12
 8000510:	607b      	str	r3, [r7, #4]
                   strcpy(period, "PM");
 8000512:	4a34      	ldr	r2, [pc, #208]	@ (80005e4 <alarmset+0x148>)
 8000514:	463b      	mov	r3, r7
 8000516:	6812      	ldr	r2, [r2, #0]
 8000518:	4611      	mov	r1, r2
 800051a:	8019      	strh	r1, [r3, #0]
 800051c:	3302      	adds	r3, #2
 800051e:	0c12      	lsrs	r2, r2, #16
 8000520:	701a      	strb	r2, [r3, #0]
 8000522:	e004      	b.n	800052e <alarmset+0x92>
               } else if (hour == 0) {
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d101      	bne.n	800052e <alarmset+0x92>
                   hour = 12; // Midnight case
 800052a:	230c      	movs	r3, #12
 800052c:	607b      	str	r3, [r7, #4]
               }

               sprintf(buffer, "%02d:%02d:%02d %s", hour, sTime.Minutes, sTime.Seconds, period);
 800052e:	4b28      	ldr	r3, [pc, #160]	@ (80005d0 <alarmset+0x134>)
 8000530:	785b      	ldrb	r3, [r3, #1]
 8000532:	4619      	mov	r1, r3
 8000534:	4b26      	ldr	r3, [pc, #152]	@ (80005d0 <alarmset+0x134>)
 8000536:	789b      	ldrb	r3, [r3, #2]
 8000538:	461a      	mov	r2, r3
 800053a:	463b      	mov	r3, r7
 800053c:	9301      	str	r3, [sp, #4]
 800053e:	9200      	str	r2, [sp, #0]
 8000540:	460b      	mov	r3, r1
 8000542:	687a      	ldr	r2, [r7, #4]
 8000544:	4928      	ldr	r1, [pc, #160]	@ (80005e8 <alarmset+0x14c>)
 8000546:	4825      	ldr	r0, [pc, #148]	@ (80005dc <alarmset+0x140>)
 8000548:	f002 fade 	bl	8002b08 <siprintf>
           }

           lcdString(buffer);
 800054c:	4823      	ldr	r0, [pc, #140]	@ (80005dc <alarmset+0x140>)
 800054e:	f7ff fee1 	bl	8000314 <lcdString>

        lcdSetCursor(1, 0);
 8000552:	2100      	movs	r1, #0
 8000554:	2001      	movs	r0, #1
 8000556:	f7ff fef3 	bl	8000340 <lcdSetCursor>
        sprintf(alarm_buff, "%02d:%02d:%02d", sAlarm.AlarmTime.Hours, sAlarm.AlarmTime.Minutes, sAlarm.AlarmTime.Seconds);
 800055a:	4b1b      	ldr	r3, [pc, #108]	@ (80005c8 <alarmset+0x12c>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	461a      	mov	r2, r3
 8000560:	4b19      	ldr	r3, [pc, #100]	@ (80005c8 <alarmset+0x12c>)
 8000562:	785b      	ldrb	r3, [r3, #1]
 8000564:	4619      	mov	r1, r3
 8000566:	4b18      	ldr	r3, [pc, #96]	@ (80005c8 <alarmset+0x12c>)
 8000568:	789b      	ldrb	r3, [r3, #2]
 800056a:	9300      	str	r3, [sp, #0]
 800056c:	460b      	mov	r3, r1
 800056e:	491a      	ldr	r1, [pc, #104]	@ (80005d8 <alarmset+0x13c>)
 8000570:	481e      	ldr	r0, [pc, #120]	@ (80005ec <alarmset+0x150>)
 8000572:	f002 fac9 	bl	8002b08 <siprintf>
        lcdString(alarm_buff);
 8000576:	481d      	ldr	r0, [pc, #116]	@ (80005ec <alarmset+0x150>)
 8000578:	f7ff fecc 	bl	8000314 <lcdString>

        if (sTime.Hours == sAlarm.AlarmTime.Hours &&
 800057c:	4b14      	ldr	r3, [pc, #80]	@ (80005d0 <alarmset+0x134>)
 800057e:	781a      	ldrb	r2, [r3, #0]
 8000580:	4b11      	ldr	r3, [pc, #68]	@ (80005c8 <alarmset+0x12c>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	429a      	cmp	r2, r3
 8000586:	d119      	bne.n	80005bc <alarmset+0x120>
            sTime.Minutes == sAlarm.AlarmTime.Minutes &&
 8000588:	4b11      	ldr	r3, [pc, #68]	@ (80005d0 <alarmset+0x134>)
 800058a:	785a      	ldrb	r2, [r3, #1]
 800058c:	4b0e      	ldr	r3, [pc, #56]	@ (80005c8 <alarmset+0x12c>)
 800058e:	785b      	ldrb	r3, [r3, #1]
        if (sTime.Hours == sAlarm.AlarmTime.Hours &&
 8000590:	429a      	cmp	r2, r3
 8000592:	d113      	bne.n	80005bc <alarmset+0x120>
            sTime.Seconds == sAlarm.AlarmTime.Seconds) {
 8000594:	4b0e      	ldr	r3, [pc, #56]	@ (80005d0 <alarmset+0x134>)
 8000596:	789a      	ldrb	r2, [r3, #2]
 8000598:	4b0b      	ldr	r3, [pc, #44]	@ (80005c8 <alarmset+0x12c>)
 800059a:	789b      	ldrb	r3, [r3, #2]
            sTime.Minutes == sAlarm.AlarmTime.Minutes &&
 800059c:	429a      	cmp	r2, r3
 800059e:	d10d      	bne.n	80005bc <alarmset+0x120>

            HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2102      	movs	r1, #2
 80005a4:	4812      	ldr	r0, [pc, #72]	@ (80005f0 <alarmset+0x154>)
 80005a6:	f000 fe6a 	bl	800127e <HAL_GPIO_WritePin>
            HAL_Delay(2000);
 80005aa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80005ae:	f000 fbc3 	bl	8000d38 <HAL_Delay>
            HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2102      	movs	r1, #2
 80005b6:	480e      	ldr	r0, [pc, #56]	@ (80005f0 <alarmset+0x154>)
 80005b8:	f000 fe61 	bl	800127e <HAL_GPIO_WritePin>
        }
    }
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	200000d8 	.word	0x200000d8
 80005c8:	200000a8 	.word	0x200000a8
 80005cc:	20000090 	.word	0x20000090
 80005d0:	200000a4 	.word	0x200000a4
 80005d4:	200000d4 	.word	0x200000d4
 80005d8:	08003480 	.word	0x08003480
 80005dc:	200000b4 	.word	0x200000b4
 80005e0:	080034a8 	.word	0x080034a8
 80005e4:	08003490 	.word	0x08003490
 80005e8:	08003494 	.word	0x08003494
 80005ec:	200000c4 	.word	0x200000c4
 80005f0:	40010c00 	.word	0x40010c00

080005f4 <mode_set>:
void mode_set(void) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
    static int last_format_state = 0;
    static int last_alarm_state = 0;

    int format_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);//FOR FORMAT
 80005fa:	2104      	movs	r1, #4
 80005fc:	481a      	ldr	r0, [pc, #104]	@ (8000668 <mode_set+0x74>)
 80005fe:	f000 fe27 	bl	8001250 <HAL_GPIO_ReadPin>
 8000602:	4603      	mov	r3, r0
 8000604:	607b      	str	r3, [r7, #4]
    int alarm_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);// FOR ALARAM ON
 8000606:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800060a:	4817      	ldr	r0, [pc, #92]	@ (8000668 <mode_set+0x74>)
 800060c:	f000 fe20 	bl	8001250 <HAL_GPIO_ReadPin>
 8000610:	4603      	mov	r3, r0
 8000612:	603b      	str	r3, [r7, #0]

    if (format_state == GPIO_PIN_SET && last_format_state == GPIO_PIN_RESET) {
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b01      	cmp	r3, #1
 8000618:	d10c      	bne.n	8000634 <mode_set+0x40>
 800061a:	4b14      	ldr	r3, [pc, #80]	@ (800066c <mode_set+0x78>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d108      	bne.n	8000634 <mode_set+0x40>
        format_flag ^= 1; // Toggle format
 8000622:	4b13      	ldr	r3, [pc, #76]	@ (8000670 <mode_set+0x7c>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f083 0301 	eor.w	r3, r3, #1
 800062a:	4a11      	ldr	r2, [pc, #68]	@ (8000670 <mode_set+0x7c>)
 800062c:	6013      	str	r3, [r2, #0]
        HAL_Delay(200);
 800062e:	20c8      	movs	r0, #200	@ 0xc8
 8000630:	f000 fb82 	bl	8000d38 <HAL_Delay>
    }
    last_format_state = format_state;
 8000634:	4a0d      	ldr	r2, [pc, #52]	@ (800066c <mode_set+0x78>)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6013      	str	r3, [r2, #0]

    if (alarm_state == GPIO_PIN_SET && last_alarm_state == GPIO_PIN_RESET) {
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d10c      	bne.n	800065a <mode_set+0x66>
 8000640:	4b0c      	ldr	r3, [pc, #48]	@ (8000674 <mode_set+0x80>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d108      	bne.n	800065a <mode_set+0x66>
        alarm_flag ^= 1; // Toggle alarm display
 8000648:	4b0b      	ldr	r3, [pc, #44]	@ (8000678 <mode_set+0x84>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f083 0301 	eor.w	r3, r3, #1
 8000650:	4a09      	ldr	r2, [pc, #36]	@ (8000678 <mode_set+0x84>)
 8000652:	6013      	str	r3, [r2, #0]
        HAL_Delay(200);
 8000654:	20c8      	movs	r0, #200	@ 0xc8
 8000656:	f000 fb6f 	bl	8000d38 <HAL_Delay>
    }
    last_alarm_state = alarm_state;
 800065a:	4a06      	ldr	r2, [pc, #24]	@ (8000674 <mode_set+0x80>)
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	6013      	str	r3, [r2, #0]
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40010c00 	.word	0x40010c00
 800066c:	200000e4 	.word	0x200000e4
 8000670:	200000d4 	.word	0x200000d4
 8000674:	200000e8 	.word	0x200000e8
 8000678:	200000d8 	.word	0x200000d8

0800067c <setupstopwatch>:


void setupstopwatch(void) {
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
    // Check Start/Stop Button
    if (HAL_GPIO_ReadPin(SW_STOP_GPIO_Port, SW_STOP_Pin) == GPIO_PIN_SET) {
 8000680:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000684:	481e      	ldr	r0, [pc, #120]	@ (8000700 <setupstopwatch+0x84>)
 8000686:	f000 fde3 	bl	8001250 <HAL_GPIO_ReadPin>
 800068a:	4603      	mov	r3, r0
 800068c:	2b01      	cmp	r3, #1
 800068e:	d115      	bne.n	80006bc <setupstopwatch+0x40>
        HAL_Delay(200); // Debounce
 8000690:	20c8      	movs	r0, #200	@ 0xc8
 8000692:	f000 fb51 	bl	8000d38 <HAL_Delay>
        sw_running = !sw_running; // Toggle stopwatch state
 8000696:	4b1b      	ldr	r3, [pc, #108]	@ (8000704 <setupstopwatch+0x88>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	2b00      	cmp	r3, #0
 800069c:	bf0c      	ite	eq
 800069e:	2301      	moveq	r3, #1
 80006a0:	2300      	movne	r3, #0
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	461a      	mov	r2, r3
 80006a6:	4b17      	ldr	r3, [pc, #92]	@ (8000704 <setupstopwatch+0x88>)
 80006a8:	601a      	str	r2, [r3, #0]
        while (HAL_GPIO_ReadPin(SW_STOP_GPIO_Port, SW_STOP_Pin) == GPIO_PIN_SET); // Wait for button release
 80006aa:	bf00      	nop
 80006ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006b0:	4813      	ldr	r0, [pc, #76]	@ (8000700 <setupstopwatch+0x84>)
 80006b2:	f000 fdcd 	bl	8001250 <HAL_GPIO_ReadPin>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d0f7      	beq.n	80006ac <setupstopwatch+0x30>
    }

    // Check Reset Button
    if (HAL_GPIO_ReadPin(SW_RESTART_GPIO_Port, SW_RESTART_Pin) == GPIO_PIN_SET) {
 80006bc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006c0:	480f      	ldr	r0, [pc, #60]	@ (8000700 <setupstopwatch+0x84>)
 80006c2:	f000 fdc5 	bl	8001250 <HAL_GPIO_ReadPin>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d117      	bne.n	80006fc <setupstopwatch+0x80>
        HAL_Delay(200); // Debounce
 80006cc:	20c8      	movs	r0, #200	@ 0xc8
 80006ce:	f000 fb33 	bl	8000d38 <HAL_Delay>
        sw_time.Hours = 0;
 80006d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000708 <setupstopwatch+0x8c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	701a      	strb	r2, [r3, #0]
        sw_time.Minutes = 0;
 80006d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000708 <setupstopwatch+0x8c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	705a      	strb	r2, [r3, #1]
        sw_time.Seconds = 0;
 80006de:	4b0a      	ldr	r3, [pc, #40]	@ (8000708 <setupstopwatch+0x8c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	709a      	strb	r2, [r3, #2]
        sw_running = 0; // Stop the stopwatch
 80006e4:	4b07      	ldr	r3, [pc, #28]	@ (8000704 <setupstopwatch+0x88>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
        while (HAL_GPIO_ReadPin(SW_RESTART_GPIO_Port, SW_RESTART_Pin) == GPIO_PIN_SET); // Wait for button release
 80006ea:	bf00      	nop
 80006ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006f0:	4803      	ldr	r0, [pc, #12]	@ (8000700 <setupstopwatch+0x84>)
 80006f2:	f000 fdad 	bl	8001250 <HAL_GPIO_ReadPin>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d0f7      	beq.n	80006ec <setupstopwatch+0x70>
    }
}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40010c00 	.word	0x40010c00
 8000704:	200000e0 	.word	0x200000e0
 8000708:	200000dc 	.word	0x200000dc

0800070c <displaystopwatch>:
void displaystopwatch(void) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af02      	add	r7, sp, #8
    lcdSetCursor(2, 0); // Set cursor to the third row
 8000712:	2100      	movs	r1, #0
 8000714:	2002      	movs	r0, #2
 8000716:	f7ff fe13 	bl	8000340 <lcdSetCursor>
    sprintf(buffer, "SW:%02d:%02d:%02d", sw_time.Hours, sw_time.Minutes, sw_time.Seconds);
 800071a:	4b0a      	ldr	r3, [pc, #40]	@ (8000744 <displaystopwatch+0x38>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	461a      	mov	r2, r3
 8000720:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <displaystopwatch+0x38>)
 8000722:	785b      	ldrb	r3, [r3, #1]
 8000724:	4619      	mov	r1, r3
 8000726:	4b07      	ldr	r3, [pc, #28]	@ (8000744 <displaystopwatch+0x38>)
 8000728:	789b      	ldrb	r3, [r3, #2]
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	460b      	mov	r3, r1
 800072e:	4906      	ldr	r1, [pc, #24]	@ (8000748 <displaystopwatch+0x3c>)
 8000730:	4806      	ldr	r0, [pc, #24]	@ (800074c <displaystopwatch+0x40>)
 8000732:	f002 f9e9 	bl	8002b08 <siprintf>
    lcdString(buffer);
 8000736:	4805      	ldr	r0, [pc, #20]	@ (800074c <displaystopwatch+0x40>)
 8000738:	f7ff fdec 	bl	8000314 <lcdString>
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	200000dc 	.word	0x200000dc
 8000748:	080034ac 	.word	0x080034ac
 800074c:	200000b4 	.word	0x200000b4

08000750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000756:	f000 fa8d 	bl	8000c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075a:	f000 f855 	bl	8000808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800075e:	f000 f90b 	bl	8000978 <MX_GPIO_Init>
  MX_RTC_Init();
 8000762:	f000 f8a5 	bl	80008b0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
//  RTC_TimeTypeDef sTime;
//  RTC_AlarmTypeDef sAlarm;
  lcdSetup(GPIOA, GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3, GPIO_PIN_4, GPIO_PIN_5, GPIO_PIN_6, GPIO_PIN_7);
 8000766:	2380      	movs	r3, #128	@ 0x80
 8000768:	9306      	str	r3, [sp, #24]
 800076a:	2340      	movs	r3, #64	@ 0x40
 800076c:	9305      	str	r3, [sp, #20]
 800076e:	2320      	movs	r3, #32
 8000770:	9304      	str	r3, [sp, #16]
 8000772:	2310      	movs	r3, #16
 8000774:	9303      	str	r3, [sp, #12]
 8000776:	2308      	movs	r3, #8
 8000778:	9302      	str	r3, [sp, #8]
 800077a:	2304      	movs	r3, #4
 800077c:	9301      	str	r3, [sp, #4]
 800077e:	2302      	movs	r3, #2
 8000780:	9300      	str	r3, [sp, #0]
 8000782:	2301      	movs	r3, #1
 8000784:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000788:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800078c:	481b      	ldr	r0, [pc, #108]	@ (80007fc <main+0xac>)
 800078e:	f7ff fcdd 	bl	800014c <lcdSetup>
  lcdInit();
 8000792:	f7ff fd83 	bl	800029c <lcdInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while (1) {
	      mode_set(); // Check for format and alarm mode
 8000796:	f7ff ff2d 	bl	80005f4 <mode_set>
	      displaytime(); // Show current time
 800079a:	f7ff fe13 	bl	80003c4 <displaytime>
	      alarmset(); // Handle alarm logic
 800079e:	f7ff fe7d 	bl	800049c <alarmset>
	      setupstopwatch(); // Check stopwatch button inputs
 80007a2:	f7ff ff6b 	bl	800067c <setupstopwatch>

	      if (sw_running) {
 80007a6:	4b16      	ldr	r3, [pc, #88]	@ (8000800 <main+0xb0>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d023      	beq.n	80007f6 <main+0xa6>
	          HAL_Delay(1000); // 1-second delay for stopwatch
 80007ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007b2:	f000 fac1 	bl	8000d38 <HAL_Delay>
	          sw_time.Seconds++;
 80007b6:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <main+0xb4>)
 80007b8:	789b      	ldrb	r3, [r3, #2]
 80007ba:	3301      	adds	r3, #1
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <main+0xb4>)
 80007c0:	709a      	strb	r2, [r3, #2]
	          if (sw_time.Seconds >= 60) {
 80007c2:	4b10      	ldr	r3, [pc, #64]	@ (8000804 <main+0xb4>)
 80007c4:	789b      	ldrb	r3, [r3, #2]
 80007c6:	2b3b      	cmp	r3, #59	@ 0x3b
 80007c8:	d915      	bls.n	80007f6 <main+0xa6>
	              sw_time.Seconds = 0;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <main+0xb4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	709a      	strb	r2, [r3, #2]
	              sw_time.Minutes++;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <main+0xb4>)
 80007d2:	785b      	ldrb	r3, [r3, #1]
 80007d4:	3301      	adds	r3, #1
 80007d6:	b2da      	uxtb	r2, r3
 80007d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000804 <main+0xb4>)
 80007da:	705a      	strb	r2, [r3, #1]
	              if (sw_time.Minutes >= 60) {
 80007dc:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <main+0xb4>)
 80007de:	785b      	ldrb	r3, [r3, #1]
 80007e0:	2b3b      	cmp	r3, #59	@ 0x3b
 80007e2:	d908      	bls.n	80007f6 <main+0xa6>
	                  sw_time.Minutes = 0;
 80007e4:	4b07      	ldr	r3, [pc, #28]	@ (8000804 <main+0xb4>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	705a      	strb	r2, [r3, #1]
	                  sw_time.Hours++;
 80007ea:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <main+0xb4>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	3301      	adds	r3, #1
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	4b04      	ldr	r3, [pc, #16]	@ (8000804 <main+0xb4>)
 80007f4:	701a      	strb	r2, [r3, #0]
	              }
	          }
	      }

	      displaystopwatch(); // Show updated stopwatch time on LCD
 80007f6:	f7ff ff89 	bl	800070c <displaystopwatch>
	      mode_set(); // Check for format and alarm mode
 80007fa:	e7cc      	b.n	8000796 <main+0x46>
 80007fc:	40010800 	.word	0x40010800
 8000800:	200000e0 	.word	0x200000e0
 8000804:	200000dc 	.word	0x200000dc

08000808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b094      	sub	sp, #80	@ 0x50
 800080c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000812:	2228      	movs	r2, #40	@ 0x28
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f002 f996 	bl	8002b48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000838:	230a      	movs	r3, #10
 800083a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800083c:	2301      	movs	r3, #1
 800083e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000840:	2310      	movs	r3, #16
 8000842:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000844:	2301      	movs	r3, #1
 8000846:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000848:	2300      	movs	r3, #0
 800084a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000850:	4618      	mov	r0, r3
 8000852:	f000 fd39 	bl	80012c8 <HAL_RCC_OscConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800085c:	f000 f920 	bl	8000aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000860:	230f      	movs	r3, #15
 8000862:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000864:	2300      	movs	r3, #0
 8000866:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800086c:	2300      	movs	r3, #0
 800086e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f000 ffa6 	bl	80017cc <HAL_RCC_ClockConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000886:	f000 f90b 	bl	8000aa0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800088a:	2301      	movs	r3, #1
 800088c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800088e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000892:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	4618      	mov	r0, r3
 8000898:	f001 f912 	bl	8001ac0 <HAL_RCCEx_PeriphCLKConfig>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008a2:	f000 f8fd 	bl	8000aa0 <Error_Handler>
  }
}
 80008a6:	bf00      	nop
 80008a8:	3750      	adds	r7, #80	@ 0x50
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80008b6:	f107 030c 	add.w	r3, r7, #12
 80008ba:	2100      	movs	r1, #0
 80008bc:	460a      	mov	r2, r1
 80008be:	801a      	strh	r2, [r3, #0]
 80008c0:	460a      	mov	r2, r1
 80008c2:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80008c4:	2300      	movs	r3, #0
 80008c6:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 80008c8:	463b      	mov	r3, r7
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008d0:	4b27      	ldr	r3, [pc, #156]	@ (8000970 <MX_RTC_Init+0xc0>)
 80008d2:	4a28      	ldr	r2, [pc, #160]	@ (8000974 <MX_RTC_Init+0xc4>)
 80008d4:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80008d6:	4b26      	ldr	r3, [pc, #152]	@ (8000970 <MX_RTC_Init+0xc0>)
 80008d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80008dc:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80008de:	4b24      	ldr	r3, [pc, #144]	@ (8000970 <MX_RTC_Init+0xc0>)
 80008e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008e4:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008e6:	4822      	ldr	r0, [pc, #136]	@ (8000970 <MX_RTC_Init+0xc0>)
 80008e8:	f001 fa56 	bl	8001d98 <HAL_RTC_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80008f2:	f000 f8d5 	bl	8000aa0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x14;
 80008f6:	2314      	movs	r3, #20
 80008f8:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x15;
 80008fa:	2315      	movs	r3, #21
 80008fc:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x10;
 80008fe:	2310      	movs	r3, #16
 8000900:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000902:	f107 030c 	add.w	r3, r7, #12
 8000906:	2201      	movs	r2, #1
 8000908:	4619      	mov	r1, r3
 800090a:	4819      	ldr	r0, [pc, #100]	@ (8000970 <MX_RTC_Init+0xc0>)
 800090c:	f001 fad0 	bl	8001eb0 <HAL_RTC_SetTime>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 8000916:	f000 f8c3 	bl	8000aa0 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800091a:	2301      	movs	r3, #1
 800091c:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 800091e:	2301      	movs	r3, #1
 8000920:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x29;
 8000922:	2329      	movs	r3, #41	@ 0x29
 8000924:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x25;
 8000926:	2325      	movs	r3, #37	@ 0x25
 8000928:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800092a:	f107 0308 	add.w	r3, r7, #8
 800092e:	2201      	movs	r2, #1
 8000930:	4619      	mov	r1, r3
 8000932:	480f      	ldr	r0, [pc, #60]	@ (8000970 <MX_RTC_Init+0xc0>)
 8000934:	f001 fc2c 	bl	8002190 <HAL_RTC_SetDate>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800093e:	f000 f8af 	bl	8000aa0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x14;
 8000942:	2314      	movs	r3, #20
 8000944:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x17;
 8000946:	2317      	movs	r3, #23
 8000948:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800094a:	2300      	movs	r3, #0
 800094c:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000952:	463b      	mov	r3, r7
 8000954:	2201      	movs	r2, #1
 8000956:	4619      	mov	r1, r3
 8000958:	4805      	ldr	r0, [pc, #20]	@ (8000970 <MX_RTC_Init+0xc0>)
 800095a:	f001 fd23 	bl	80023a4 <HAL_RTC_SetAlarm>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8000964:	f000 f89c 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	3710      	adds	r7, #16
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000090 	.word	0x20000090
 8000974:	40002800 	.word	0x40002800

08000978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b088      	sub	sp, #32
 800097c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097e:	f107 0310 	add.w	r3, r7, #16
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098c:	4b41      	ldr	r3, [pc, #260]	@ (8000a94 <MX_GPIO_Init+0x11c>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	4a40      	ldr	r2, [pc, #256]	@ (8000a94 <MX_GPIO_Init+0x11c>)
 8000992:	f043 0310 	orr.w	r3, r3, #16
 8000996:	6193      	str	r3, [r2, #24]
 8000998:	4b3e      	ldr	r3, [pc, #248]	@ (8000a94 <MX_GPIO_Init+0x11c>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	f003 0310 	and.w	r3, r3, #16
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a4:	4b3b      	ldr	r3, [pc, #236]	@ (8000a94 <MX_GPIO_Init+0x11c>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	4a3a      	ldr	r2, [pc, #232]	@ (8000a94 <MX_GPIO_Init+0x11c>)
 80009aa:	f043 0320 	orr.w	r3, r3, #32
 80009ae:	6193      	str	r3, [r2, #24]
 80009b0:	4b38      	ldr	r3, [pc, #224]	@ (8000a94 <MX_GPIO_Init+0x11c>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f003 0320 	and.w	r3, r3, #32
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009bc:	4b35      	ldr	r3, [pc, #212]	@ (8000a94 <MX_GPIO_Init+0x11c>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	4a34      	ldr	r2, [pc, #208]	@ (8000a94 <MX_GPIO_Init+0x11c>)
 80009c2:	f043 0304 	orr.w	r3, r3, #4
 80009c6:	6193      	str	r3, [r2, #24]
 80009c8:	4b32      	ldr	r3, [pc, #200]	@ (8000a94 <MX_GPIO_Init+0x11c>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	f003 0304 	and.w	r3, r3, #4
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d4:	4b2f      	ldr	r3, [pc, #188]	@ (8000a94 <MX_GPIO_Init+0x11c>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a2e      	ldr	r2, [pc, #184]	@ (8000a94 <MX_GPIO_Init+0x11c>)
 80009da:	f043 0308 	orr.w	r3, r3, #8
 80009de:	6193      	str	r3, [r2, #24]
 80009e0:	4b2c      	ldr	r3, [pc, #176]	@ (8000a94 <MX_GPIO_Init+0x11c>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	f003 0308 	and.w	r3, r3, #8
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80009ec:	2200      	movs	r2, #0
 80009ee:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80009f2:	4829      	ldr	r0, [pc, #164]	@ (8000a98 <MX_GPIO_Init+0x120>)
 80009f4:	f000 fc43 	bl	800127e <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, GPIO_PIN_RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2102      	movs	r1, #2
 80009fc:	4827      	ldr	r0, [pc, #156]	@ (8000a9c <MX_GPIO_Init+0x124>)
 80009fe:	f000 fc3e 	bl	800127e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000a02:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8000a06:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2302      	movs	r3, #2
 8000a12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a14:	f107 0310 	add.w	r3, r7, #16
 8000a18:	4619      	mov	r1, r3
 8000a1a:	481f      	ldr	r0, [pc, #124]	@ (8000a98 <MX_GPIO_Init+0x120>)
 8000a1c:	f000 fa94 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : ALARM_Pin */
  GPIO_InitStruct.Pin = ALARM_Pin;
 8000a20:	2302      	movs	r3, #2
 8000a22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ALARM_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 0310 	add.w	r3, r7, #16
 8000a34:	4619      	mov	r1, r3
 8000a36:	4819      	ldr	r0, [pc, #100]	@ (8000a9c <MX_GPIO_Init+0x124>)
 8000a38:	f000 fa86 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : FORMAT_Pin ALARM_ON_Pin SW_RESTART_Pin SW_STOP_Pin */
  GPIO_InitStruct.Pin = FORMAT_Pin|ALARM_ON_Pin|SW_RESTART_Pin|SW_STOP_Pin;
 8000a3c:	f243 4304 	movw	r3, #13316	@ 0x3404
 8000a40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a42:	2300      	movs	r3, #0
 8000a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a46:	2302      	movs	r3, #2
 8000a48:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4a:	f107 0310 	add.w	r3, r7, #16
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4812      	ldr	r0, [pc, #72]	@ (8000a9c <MX_GPIO_Init+0x124>)
 8000a52:	f000 fa79 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : riya_set_Pin */
  GPIO_InitStruct.Pin = riya_set_Pin;
 8000a56:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000a5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(riya_set_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 0310 	add.w	r3, r7, #16
 8000a68:	4619      	mov	r1, r3
 8000a6a:	480c      	ldr	r0, [pc, #48]	@ (8000a9c <MX_GPIO_Init+0x124>)
 8000a6c:	f000 fa6c 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a70:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000a74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7e:	f107 0310 	add.w	r3, r7, #16
 8000a82:	4619      	mov	r1, r3
 8000a84:	4804      	ldr	r0, [pc, #16]	@ (8000a98 <MX_GPIO_Init+0x120>)
 8000a86:	f000 fa5f 	bl	8000f48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a8a:	bf00      	nop
 8000a8c:	3720      	adds	r7, #32
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40021000 	.word	0x40021000
 8000a98:	40010800 	.word	0x40010800
 8000a9c:	40010c00 	.word	0x40010c00

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <Error_Handler+0x8>

08000aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ab2:	4b15      	ldr	r3, [pc, #84]	@ (8000b08 <HAL_MspInit+0x5c>)
 8000ab4:	699b      	ldr	r3, [r3, #24]
 8000ab6:	4a14      	ldr	r2, [pc, #80]	@ (8000b08 <HAL_MspInit+0x5c>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6193      	str	r3, [r2, #24]
 8000abe:	4b12      	ldr	r3, [pc, #72]	@ (8000b08 <HAL_MspInit+0x5c>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aca:	4b0f      	ldr	r3, [pc, #60]	@ (8000b08 <HAL_MspInit+0x5c>)
 8000acc:	69db      	ldr	r3, [r3, #28]
 8000ace:	4a0e      	ldr	r2, [pc, #56]	@ (8000b08 <HAL_MspInit+0x5c>)
 8000ad0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ad4:	61d3      	str	r3, [r2, #28]
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b08 <HAL_MspInit+0x5c>)
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8000b0c <HAL_MspInit+0x60>)
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	4a04      	ldr	r2, [pc, #16]	@ (8000b0c <HAL_MspInit+0x60>)
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afe:	bf00      	nop
 8000b00:	3714      	adds	r7, #20
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	40010000 	.word	0x40010000

08000b10 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a0b      	ldr	r2, [pc, #44]	@ (8000b4c <HAL_RTC_MspInit+0x3c>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d110      	bne.n	8000b44 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000b22:	f000 fbc5 	bl	80012b0 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000b26:	4b0a      	ldr	r3, [pc, #40]	@ (8000b50 <HAL_RTC_MspInit+0x40>)
 8000b28:	69db      	ldr	r3, [r3, #28]
 8000b2a:	4a09      	ldr	r2, [pc, #36]	@ (8000b50 <HAL_RTC_MspInit+0x40>)
 8000b2c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000b30:	61d3      	str	r3, [r2, #28]
 8000b32:	4b07      	ldr	r3, [pc, #28]	@ (8000b50 <HAL_RTC_MspInit+0x40>)
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b3e:	4b05      	ldr	r3, [pc, #20]	@ (8000b54 <HAL_RTC_MspInit+0x44>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000b44:	bf00      	nop
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40002800 	.word	0x40002800
 8000b50:	40021000 	.word	0x40021000
 8000b54:	4242043c 	.word	0x4242043c

08000b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <NMI_Handler+0x4>

08000b60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <HardFault_Handler+0x4>

08000b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <MemManage_Handler+0x4>

08000b70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <BusFault_Handler+0x4>

08000b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <UsageFault_Handler+0x4>

08000b80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr

08000b8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr

08000b98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr

08000ba4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba8:	f000 f8aa 	bl	8000d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb8:	4a14      	ldr	r2, [pc, #80]	@ (8000c0c <_sbrk+0x5c>)
 8000bba:	4b15      	ldr	r3, [pc, #84]	@ (8000c10 <_sbrk+0x60>)
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc4:	4b13      	ldr	r3, [pc, #76]	@ (8000c14 <_sbrk+0x64>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d102      	bne.n	8000bd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bcc:	4b11      	ldr	r3, [pc, #68]	@ (8000c14 <_sbrk+0x64>)
 8000bce:	4a12      	ldr	r2, [pc, #72]	@ (8000c18 <_sbrk+0x68>)
 8000bd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bd2:	4b10      	ldr	r3, [pc, #64]	@ (8000c14 <_sbrk+0x64>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d207      	bcs.n	8000bf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000be0:	f001 ffba 	bl	8002b58 <__errno>
 8000be4:	4603      	mov	r3, r0
 8000be6:	220c      	movs	r2, #12
 8000be8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bee:	e009      	b.n	8000c04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bf0:	4b08      	ldr	r3, [pc, #32]	@ (8000c14 <_sbrk+0x64>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bf6:	4b07      	ldr	r3, [pc, #28]	@ (8000c14 <_sbrk+0x64>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	4a05      	ldr	r2, [pc, #20]	@ (8000c14 <_sbrk+0x64>)
 8000c00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c02:	68fb      	ldr	r3, [r7, #12]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3718      	adds	r7, #24
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20005000 	.word	0x20005000
 8000c10:	00000400 	.word	0x00000400
 8000c14:	200000ec 	.word	0x200000ec
 8000c18:	20000240 	.word	0x20000240

08000c1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr

08000c28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c28:	f7ff fff8 	bl	8000c1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c2c:	480b      	ldr	r0, [pc, #44]	@ (8000c5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c2e:	490c      	ldr	r1, [pc, #48]	@ (8000c60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c30:	4a0c      	ldr	r2, [pc, #48]	@ (8000c64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c34:	e002      	b.n	8000c3c <LoopCopyDataInit>

08000c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3a:	3304      	adds	r3, #4

08000c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c40:	d3f9      	bcc.n	8000c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c42:	4a09      	ldr	r2, [pc, #36]	@ (8000c68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c44:	4c09      	ldr	r4, [pc, #36]	@ (8000c6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c48:	e001      	b.n	8000c4e <LoopFillZerobss>

08000c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c4c:	3204      	adds	r2, #4

08000c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c50:	d3fb      	bcc.n	8000c4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c52:	f001 ff87 	bl	8002b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c56:	f7ff fd7b 	bl	8000750 <main>
  bx lr
 8000c5a:	4770      	bx	lr
  ldr r0, =_sdata
 8000c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c60:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c64:	0800353c 	.word	0x0800353c
  ldr r2, =_sbss
 8000c68:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c6c:	2000023c 	.word	0x2000023c

08000c70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c70:	e7fe      	b.n	8000c70 <ADC1_2_IRQHandler>
	...

08000c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c78:	4b08      	ldr	r3, [pc, #32]	@ (8000c9c <HAL_Init+0x28>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a07      	ldr	r2, [pc, #28]	@ (8000c9c <HAL_Init+0x28>)
 8000c7e:	f043 0310 	orr.w	r3, r3, #16
 8000c82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c84:	2003      	movs	r0, #3
 8000c86:	f000 f92b 	bl	8000ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c8a:	200f      	movs	r0, #15
 8000c8c:	f000 f808 	bl	8000ca0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c90:	f7ff ff0c 	bl	8000aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40022000 	.word	0x40022000

08000ca0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca8:	4b12      	ldr	r3, [pc, #72]	@ (8000cf4 <HAL_InitTick+0x54>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4b12      	ldr	r3, [pc, #72]	@ (8000cf8 <HAL_InitTick+0x58>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 f935 	bl	8000f2e <HAL_SYSTICK_Config>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00e      	b.n	8000cec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b0f      	cmp	r3, #15
 8000cd2:	d80a      	bhi.n	8000cea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cdc:	f000 f90b 	bl	8000ef6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce0:	4a06      	ldr	r2, [pc, #24]	@ (8000cfc <HAL_InitTick+0x5c>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e000      	b.n	8000cec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000000 	.word	0x20000000
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000004 	.word	0x20000004

08000d00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d04:	4b05      	ldr	r3, [pc, #20]	@ (8000d1c <HAL_IncTick+0x1c>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b05      	ldr	r3, [pc, #20]	@ (8000d20 <HAL_IncTick+0x20>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4413      	add	r3, r2
 8000d10:	4a03      	ldr	r2, [pc, #12]	@ (8000d20 <HAL_IncTick+0x20>)
 8000d12:	6013      	str	r3, [r2, #0]
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	200000f0 	.word	0x200000f0

08000d24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return uwTick;
 8000d28:	4b02      	ldr	r3, [pc, #8]	@ (8000d34 <HAL_GetTick+0x10>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr
 8000d34:	200000f0 	.word	0x200000f0

08000d38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d40:	f7ff fff0 	bl	8000d24 <HAL_GetTick>
 8000d44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000d50:	d005      	beq.n	8000d5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d52:	4b0a      	ldr	r3, [pc, #40]	@ (8000d7c <HAL_Delay+0x44>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	461a      	mov	r2, r3
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d5e:	bf00      	nop
 8000d60:	f7ff ffe0 	bl	8000d24 <HAL_GetTick>
 8000d64:	4602      	mov	r2, r0
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d8f7      	bhi.n	8000d60 <HAL_Delay+0x28>
  {
  }
}
 8000d70:	bf00      	nop
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000008 	.word	0x20000008

08000d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d90:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000db2:	4a04      	ldr	r2, [pc, #16]	@ (8000dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	60d3      	str	r3, [r2, #12]
}
 8000db8:	bf00      	nop
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dcc:	4b04      	ldr	r3, [pc, #16]	@ (8000de0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	0a1b      	lsrs	r3, r3, #8
 8000dd2:	f003 0307 	and.w	r3, r3, #7
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bc80      	pop	{r7}
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	6039      	str	r1, [r7, #0]
 8000dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	db0a      	blt.n	8000e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	490c      	ldr	r1, [pc, #48]	@ (8000e30 <__NVIC_SetPriority+0x4c>)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	0112      	lsls	r2, r2, #4
 8000e04:	b2d2      	uxtb	r2, r2
 8000e06:	440b      	add	r3, r1
 8000e08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e0c:	e00a      	b.n	8000e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4908      	ldr	r1, [pc, #32]	@ (8000e34 <__NVIC_SetPriority+0x50>)
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	f003 030f 	and.w	r3, r3, #15
 8000e1a:	3b04      	subs	r3, #4
 8000e1c:	0112      	lsls	r2, r2, #4
 8000e1e:	b2d2      	uxtb	r2, r2
 8000e20:	440b      	add	r3, r1
 8000e22:	761a      	strb	r2, [r3, #24]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	e000e100 	.word	0xe000e100
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b089      	sub	sp, #36	@ 0x24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f1c3 0307 	rsb	r3, r3, #7
 8000e52:	2b04      	cmp	r3, #4
 8000e54:	bf28      	it	cs
 8000e56:	2304      	movcs	r3, #4
 8000e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	2b06      	cmp	r3, #6
 8000e60:	d902      	bls.n	8000e68 <NVIC_EncodePriority+0x30>
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3b03      	subs	r3, #3
 8000e66:	e000      	b.n	8000e6a <NVIC_EncodePriority+0x32>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43da      	mvns	r2, r3
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e80:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8a:	43d9      	mvns	r1, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	4313      	orrs	r3, r2
         );
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3724      	adds	r7, #36	@ 0x24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr

08000e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000eac:	d301      	bcc.n	8000eb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e00f      	b.n	8000ed2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000edc <SysTick_Config+0x40>)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eba:	210f      	movs	r1, #15
 8000ebc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ec0:	f7ff ff90 	bl	8000de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec4:	4b05      	ldr	r3, [pc, #20]	@ (8000edc <SysTick_Config+0x40>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eca:	4b04      	ldr	r3, [pc, #16]	@ (8000edc <SysTick_Config+0x40>)
 8000ecc:	2207      	movs	r2, #7
 8000ece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	e000e010 	.word	0xe000e010

08000ee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f7ff ff49 	bl	8000d80 <__NVIC_SetPriorityGrouping>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b086      	sub	sp, #24
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	4603      	mov	r3, r0
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	607a      	str	r2, [r7, #4]
 8000f02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f08:	f7ff ff5e 	bl	8000dc8 <__NVIC_GetPriorityGrouping>
 8000f0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	68b9      	ldr	r1, [r7, #8]
 8000f12:	6978      	ldr	r0, [r7, #20]
 8000f14:	f7ff ff90 	bl	8000e38 <NVIC_EncodePriority>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff5f 	bl	8000de4 <__NVIC_SetPriority>
}
 8000f26:	bf00      	nop
 8000f28:	3718      	adds	r7, #24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff ffb0 	bl	8000e9c <SysTick_Config>
 8000f3c:	4603      	mov	r3, r0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b08b      	sub	sp, #44	@ 0x2c
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f52:	2300      	movs	r3, #0
 8000f54:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f56:	2300      	movs	r3, #0
 8000f58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f5a:	e169      	b.n	8001230 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	69fa      	ldr	r2, [r7, #28]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	f040 8158 	bne.w	800122a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	4a9a      	ldr	r2, [pc, #616]	@ (80011e8 <HAL_GPIO_Init+0x2a0>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d05e      	beq.n	8001042 <HAL_GPIO_Init+0xfa>
 8000f84:	4a98      	ldr	r2, [pc, #608]	@ (80011e8 <HAL_GPIO_Init+0x2a0>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d875      	bhi.n	8001076 <HAL_GPIO_Init+0x12e>
 8000f8a:	4a98      	ldr	r2, [pc, #608]	@ (80011ec <HAL_GPIO_Init+0x2a4>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d058      	beq.n	8001042 <HAL_GPIO_Init+0xfa>
 8000f90:	4a96      	ldr	r2, [pc, #600]	@ (80011ec <HAL_GPIO_Init+0x2a4>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d86f      	bhi.n	8001076 <HAL_GPIO_Init+0x12e>
 8000f96:	4a96      	ldr	r2, [pc, #600]	@ (80011f0 <HAL_GPIO_Init+0x2a8>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d052      	beq.n	8001042 <HAL_GPIO_Init+0xfa>
 8000f9c:	4a94      	ldr	r2, [pc, #592]	@ (80011f0 <HAL_GPIO_Init+0x2a8>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d869      	bhi.n	8001076 <HAL_GPIO_Init+0x12e>
 8000fa2:	4a94      	ldr	r2, [pc, #592]	@ (80011f4 <HAL_GPIO_Init+0x2ac>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d04c      	beq.n	8001042 <HAL_GPIO_Init+0xfa>
 8000fa8:	4a92      	ldr	r2, [pc, #584]	@ (80011f4 <HAL_GPIO_Init+0x2ac>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d863      	bhi.n	8001076 <HAL_GPIO_Init+0x12e>
 8000fae:	4a92      	ldr	r2, [pc, #584]	@ (80011f8 <HAL_GPIO_Init+0x2b0>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d046      	beq.n	8001042 <HAL_GPIO_Init+0xfa>
 8000fb4:	4a90      	ldr	r2, [pc, #576]	@ (80011f8 <HAL_GPIO_Init+0x2b0>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d85d      	bhi.n	8001076 <HAL_GPIO_Init+0x12e>
 8000fba:	2b12      	cmp	r3, #18
 8000fbc:	d82a      	bhi.n	8001014 <HAL_GPIO_Init+0xcc>
 8000fbe:	2b12      	cmp	r3, #18
 8000fc0:	d859      	bhi.n	8001076 <HAL_GPIO_Init+0x12e>
 8000fc2:	a201      	add	r2, pc, #4	@ (adr r2, 8000fc8 <HAL_GPIO_Init+0x80>)
 8000fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc8:	08001043 	.word	0x08001043
 8000fcc:	0800101d 	.word	0x0800101d
 8000fd0:	0800102f 	.word	0x0800102f
 8000fd4:	08001071 	.word	0x08001071
 8000fd8:	08001077 	.word	0x08001077
 8000fdc:	08001077 	.word	0x08001077
 8000fe0:	08001077 	.word	0x08001077
 8000fe4:	08001077 	.word	0x08001077
 8000fe8:	08001077 	.word	0x08001077
 8000fec:	08001077 	.word	0x08001077
 8000ff0:	08001077 	.word	0x08001077
 8000ff4:	08001077 	.word	0x08001077
 8000ff8:	08001077 	.word	0x08001077
 8000ffc:	08001077 	.word	0x08001077
 8001000:	08001077 	.word	0x08001077
 8001004:	08001077 	.word	0x08001077
 8001008:	08001077 	.word	0x08001077
 800100c:	08001025 	.word	0x08001025
 8001010:	08001039 	.word	0x08001039
 8001014:	4a79      	ldr	r2, [pc, #484]	@ (80011fc <HAL_GPIO_Init+0x2b4>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d013      	beq.n	8001042 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800101a:	e02c      	b.n	8001076 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	623b      	str	r3, [r7, #32]
          break;
 8001022:	e029      	b.n	8001078 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	3304      	adds	r3, #4
 800102a:	623b      	str	r3, [r7, #32]
          break;
 800102c:	e024      	b.n	8001078 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	3308      	adds	r3, #8
 8001034:	623b      	str	r3, [r7, #32]
          break;
 8001036:	e01f      	b.n	8001078 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	330c      	adds	r3, #12
 800103e:	623b      	str	r3, [r7, #32]
          break;
 8001040:	e01a      	b.n	8001078 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d102      	bne.n	8001050 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800104a:	2304      	movs	r3, #4
 800104c:	623b      	str	r3, [r7, #32]
          break;
 800104e:	e013      	b.n	8001078 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d105      	bne.n	8001064 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001058:	2308      	movs	r3, #8
 800105a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	69fa      	ldr	r2, [r7, #28]
 8001060:	611a      	str	r2, [r3, #16]
          break;
 8001062:	e009      	b.n	8001078 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001064:	2308      	movs	r3, #8
 8001066:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	69fa      	ldr	r2, [r7, #28]
 800106c:	615a      	str	r2, [r3, #20]
          break;
 800106e:	e003      	b.n	8001078 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001070:	2300      	movs	r3, #0
 8001072:	623b      	str	r3, [r7, #32]
          break;
 8001074:	e000      	b.n	8001078 <HAL_GPIO_Init+0x130>
          break;
 8001076:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	2bff      	cmp	r3, #255	@ 0xff
 800107c:	d801      	bhi.n	8001082 <HAL_GPIO_Init+0x13a>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	e001      	b.n	8001086 <HAL_GPIO_Init+0x13e>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3304      	adds	r3, #4
 8001086:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	2bff      	cmp	r3, #255	@ 0xff
 800108c:	d802      	bhi.n	8001094 <HAL_GPIO_Init+0x14c>
 800108e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	e002      	b.n	800109a <HAL_GPIO_Init+0x152>
 8001094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001096:	3b08      	subs	r3, #8
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	210f      	movs	r1, #15
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	fa01 f303 	lsl.w	r3, r1, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	401a      	ands	r2, r3
 80010ac:	6a39      	ldr	r1, [r7, #32]
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	fa01 f303 	lsl.w	r3, r1, r3
 80010b4:	431a      	orrs	r2, r3
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	f000 80b1 	beq.w	800122a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010c8:	4b4d      	ldr	r3, [pc, #308]	@ (8001200 <HAL_GPIO_Init+0x2b8>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	4a4c      	ldr	r2, [pc, #304]	@ (8001200 <HAL_GPIO_Init+0x2b8>)
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	6193      	str	r3, [r2, #24]
 80010d4:	4b4a      	ldr	r3, [pc, #296]	@ (8001200 <HAL_GPIO_Init+0x2b8>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010e0:	4a48      	ldr	r2, [pc, #288]	@ (8001204 <HAL_GPIO_Init+0x2bc>)
 80010e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e4:	089b      	lsrs	r3, r3, #2
 80010e6:	3302      	adds	r3, #2
 80010e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f0:	f003 0303 	and.w	r3, r3, #3
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	220f      	movs	r2, #15
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	4013      	ands	r3, r2
 8001102:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a40      	ldr	r2, [pc, #256]	@ (8001208 <HAL_GPIO_Init+0x2c0>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d013      	beq.n	8001134 <HAL_GPIO_Init+0x1ec>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a3f      	ldr	r2, [pc, #252]	@ (800120c <HAL_GPIO_Init+0x2c4>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d00d      	beq.n	8001130 <HAL_GPIO_Init+0x1e8>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a3e      	ldr	r2, [pc, #248]	@ (8001210 <HAL_GPIO_Init+0x2c8>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d007      	beq.n	800112c <HAL_GPIO_Init+0x1e4>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a3d      	ldr	r2, [pc, #244]	@ (8001214 <HAL_GPIO_Init+0x2cc>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d101      	bne.n	8001128 <HAL_GPIO_Init+0x1e0>
 8001124:	2303      	movs	r3, #3
 8001126:	e006      	b.n	8001136 <HAL_GPIO_Init+0x1ee>
 8001128:	2304      	movs	r3, #4
 800112a:	e004      	b.n	8001136 <HAL_GPIO_Init+0x1ee>
 800112c:	2302      	movs	r3, #2
 800112e:	e002      	b.n	8001136 <HAL_GPIO_Init+0x1ee>
 8001130:	2301      	movs	r3, #1
 8001132:	e000      	b.n	8001136 <HAL_GPIO_Init+0x1ee>
 8001134:	2300      	movs	r3, #0
 8001136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001138:	f002 0203 	and.w	r2, r2, #3
 800113c:	0092      	lsls	r2, r2, #2
 800113e:	4093      	lsls	r3, r2
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	4313      	orrs	r3, r2
 8001144:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001146:	492f      	ldr	r1, [pc, #188]	@ (8001204 <HAL_GPIO_Init+0x2bc>)
 8001148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800114a:	089b      	lsrs	r3, r3, #2
 800114c:	3302      	adds	r3, #2
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d006      	beq.n	800116e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001160:	4b2d      	ldr	r3, [pc, #180]	@ (8001218 <HAL_GPIO_Init+0x2d0>)
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	492c      	ldr	r1, [pc, #176]	@ (8001218 <HAL_GPIO_Init+0x2d0>)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	4313      	orrs	r3, r2
 800116a:	608b      	str	r3, [r1, #8]
 800116c:	e006      	b.n	800117c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800116e:	4b2a      	ldr	r3, [pc, #168]	@ (8001218 <HAL_GPIO_Init+0x2d0>)
 8001170:	689a      	ldr	r2, [r3, #8]
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	43db      	mvns	r3, r3
 8001176:	4928      	ldr	r1, [pc, #160]	@ (8001218 <HAL_GPIO_Init+0x2d0>)
 8001178:	4013      	ands	r3, r2
 800117a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d006      	beq.n	8001196 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001188:	4b23      	ldr	r3, [pc, #140]	@ (8001218 <HAL_GPIO_Init+0x2d0>)
 800118a:	68da      	ldr	r2, [r3, #12]
 800118c:	4922      	ldr	r1, [pc, #136]	@ (8001218 <HAL_GPIO_Init+0x2d0>)
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	60cb      	str	r3, [r1, #12]
 8001194:	e006      	b.n	80011a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001196:	4b20      	ldr	r3, [pc, #128]	@ (8001218 <HAL_GPIO_Init+0x2d0>)
 8001198:	68da      	ldr	r2, [r3, #12]
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	43db      	mvns	r3, r3
 800119e:	491e      	ldr	r1, [pc, #120]	@ (8001218 <HAL_GPIO_Init+0x2d0>)
 80011a0:	4013      	ands	r3, r2
 80011a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d006      	beq.n	80011be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011b0:	4b19      	ldr	r3, [pc, #100]	@ (8001218 <HAL_GPIO_Init+0x2d0>)
 80011b2:	685a      	ldr	r2, [r3, #4]
 80011b4:	4918      	ldr	r1, [pc, #96]	@ (8001218 <HAL_GPIO_Init+0x2d0>)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	604b      	str	r3, [r1, #4]
 80011bc:	e006      	b.n	80011cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011be:	4b16      	ldr	r3, [pc, #88]	@ (8001218 <HAL_GPIO_Init+0x2d0>)
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	4914      	ldr	r1, [pc, #80]	@ (8001218 <HAL_GPIO_Init+0x2d0>)
 80011c8:	4013      	ands	r3, r2
 80011ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d021      	beq.n	800121c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001218 <HAL_GPIO_Init+0x2d0>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	490e      	ldr	r1, [pc, #56]	@ (8001218 <HAL_GPIO_Init+0x2d0>)
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	600b      	str	r3, [r1, #0]
 80011e4:	e021      	b.n	800122a <HAL_GPIO_Init+0x2e2>
 80011e6:	bf00      	nop
 80011e8:	10320000 	.word	0x10320000
 80011ec:	10310000 	.word	0x10310000
 80011f0:	10220000 	.word	0x10220000
 80011f4:	10210000 	.word	0x10210000
 80011f8:	10120000 	.word	0x10120000
 80011fc:	10110000 	.word	0x10110000
 8001200:	40021000 	.word	0x40021000
 8001204:	40010000 	.word	0x40010000
 8001208:	40010800 	.word	0x40010800
 800120c:	40010c00 	.word	0x40010c00
 8001210:	40011000 	.word	0x40011000
 8001214:	40011400 	.word	0x40011400
 8001218:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800121c:	4b0b      	ldr	r3, [pc, #44]	@ (800124c <HAL_GPIO_Init+0x304>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	43db      	mvns	r3, r3
 8001224:	4909      	ldr	r1, [pc, #36]	@ (800124c <HAL_GPIO_Init+0x304>)
 8001226:	4013      	ands	r3, r2
 8001228:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800122a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122c:	3301      	adds	r3, #1
 800122e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001236:	fa22 f303 	lsr.w	r3, r2, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	f47f ae8e 	bne.w	8000f5c <HAL_GPIO_Init+0x14>
  }
}
 8001240:	bf00      	nop
 8001242:	bf00      	nop
 8001244:	372c      	adds	r7, #44	@ 0x2c
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr
 800124c:	40010400 	.word	0x40010400

08001250 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	460b      	mov	r3, r1
 800125a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	887b      	ldrh	r3, [r7, #2]
 8001262:	4013      	ands	r3, r2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d002      	beq.n	800126e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001268:	2301      	movs	r3, #1
 800126a:	73fb      	strb	r3, [r7, #15]
 800126c:	e001      	b.n	8001272 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800126e:	2300      	movs	r3, #0
 8001270:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001272:	7bfb      	ldrb	r3, [r7, #15]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3714      	adds	r7, #20
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr

0800127e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800127e:	b480      	push	{r7}
 8001280:	b083      	sub	sp, #12
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
 8001286:	460b      	mov	r3, r1
 8001288:	807b      	strh	r3, [r7, #2]
 800128a:	4613      	mov	r3, r2
 800128c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800128e:	787b      	ldrb	r3, [r7, #1]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001294:	887a      	ldrh	r2, [r7, #2]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800129a:	e003      	b.n	80012a4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800129c:	887b      	ldrh	r3, [r7, #2]
 800129e:	041a      	lsls	r2, r3, #16
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	611a      	str	r2, [r3, #16]
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr
	...

080012b0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80012b4:	4b03      	ldr	r3, [pc, #12]	@ (80012c4 <HAL_PWR_EnableBkUpAccess+0x14>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	601a      	str	r2, [r3, #0]
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	420e0020 	.word	0x420e0020

080012c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d101      	bne.n	80012da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e272      	b.n	80017c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f000 8087 	beq.w	80013f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012e8:	4b92      	ldr	r3, [pc, #584]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 030c 	and.w	r3, r3, #12
 80012f0:	2b04      	cmp	r3, #4
 80012f2:	d00c      	beq.n	800130e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012f4:	4b8f      	ldr	r3, [pc, #572]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 030c 	and.w	r3, r3, #12
 80012fc:	2b08      	cmp	r3, #8
 80012fe:	d112      	bne.n	8001326 <HAL_RCC_OscConfig+0x5e>
 8001300:	4b8c      	ldr	r3, [pc, #560]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001308:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800130c:	d10b      	bne.n	8001326 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800130e:	4b89      	ldr	r3, [pc, #548]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d06c      	beq.n	80013f4 <HAL_RCC_OscConfig+0x12c>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d168      	bne.n	80013f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e24c      	b.n	80017c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800132e:	d106      	bne.n	800133e <HAL_RCC_OscConfig+0x76>
 8001330:	4b80      	ldr	r3, [pc, #512]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a7f      	ldr	r2, [pc, #508]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 8001336:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	e02e      	b.n	800139c <HAL_RCC_OscConfig+0xd4>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d10c      	bne.n	8001360 <HAL_RCC_OscConfig+0x98>
 8001346:	4b7b      	ldr	r3, [pc, #492]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a7a      	ldr	r2, [pc, #488]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 800134c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	4b78      	ldr	r3, [pc, #480]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a77      	ldr	r2, [pc, #476]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 8001358:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	e01d      	b.n	800139c <HAL_RCC_OscConfig+0xd4>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001368:	d10c      	bne.n	8001384 <HAL_RCC_OscConfig+0xbc>
 800136a:	4b72      	ldr	r3, [pc, #456]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a71      	ldr	r2, [pc, #452]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 8001370:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	4b6f      	ldr	r3, [pc, #444]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a6e      	ldr	r2, [pc, #440]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 800137c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	e00b      	b.n	800139c <HAL_RCC_OscConfig+0xd4>
 8001384:	4b6b      	ldr	r3, [pc, #428]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a6a      	ldr	r2, [pc, #424]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 800138a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800138e:	6013      	str	r3, [r2, #0]
 8001390:	4b68      	ldr	r3, [pc, #416]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a67      	ldr	r2, [pc, #412]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 8001396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800139a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d013      	beq.n	80013cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fcbe 	bl	8000d24 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013ac:	f7ff fcba 	bl	8000d24 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b64      	cmp	r3, #100	@ 0x64
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e200      	b.n	80017c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013be:	4b5d      	ldr	r3, [pc, #372]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0f0      	beq.n	80013ac <HAL_RCC_OscConfig+0xe4>
 80013ca:	e014      	b.n	80013f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013cc:	f7ff fcaa 	bl	8000d24 <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013d4:	f7ff fca6 	bl	8000d24 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b64      	cmp	r3, #100	@ 0x64
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e1ec      	b.n	80017c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013e6:	4b53      	ldr	r3, [pc, #332]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1f0      	bne.n	80013d4 <HAL_RCC_OscConfig+0x10c>
 80013f2:	e000      	b.n	80013f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d063      	beq.n	80014ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001402:	4b4c      	ldr	r3, [pc, #304]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f003 030c 	and.w	r3, r3, #12
 800140a:	2b00      	cmp	r3, #0
 800140c:	d00b      	beq.n	8001426 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800140e:	4b49      	ldr	r3, [pc, #292]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f003 030c 	and.w	r3, r3, #12
 8001416:	2b08      	cmp	r3, #8
 8001418:	d11c      	bne.n	8001454 <HAL_RCC_OscConfig+0x18c>
 800141a:	4b46      	ldr	r3, [pc, #280]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d116      	bne.n	8001454 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001426:	4b43      	ldr	r3, [pc, #268]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d005      	beq.n	800143e <HAL_RCC_OscConfig+0x176>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d001      	beq.n	800143e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e1c0      	b.n	80017c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800143e:	4b3d      	ldr	r3, [pc, #244]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	4939      	ldr	r1, [pc, #228]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 800144e:	4313      	orrs	r3, r2
 8001450:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001452:	e03a      	b.n	80014ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	691b      	ldr	r3, [r3, #16]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d020      	beq.n	800149e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800145c:	4b36      	ldr	r3, [pc, #216]	@ (8001538 <HAL_RCC_OscConfig+0x270>)
 800145e:	2201      	movs	r2, #1
 8001460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001462:	f7ff fc5f 	bl	8000d24 <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001468:	e008      	b.n	800147c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800146a:	f7ff fc5b 	bl	8000d24 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e1a1      	b.n	80017c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800147c:	4b2d      	ldr	r3, [pc, #180]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d0f0      	beq.n	800146a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001488:	4b2a      	ldr	r3, [pc, #168]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	695b      	ldr	r3, [r3, #20]
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	4927      	ldr	r1, [pc, #156]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 8001498:	4313      	orrs	r3, r2
 800149a:	600b      	str	r3, [r1, #0]
 800149c:	e015      	b.n	80014ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800149e:	4b26      	ldr	r3, [pc, #152]	@ (8001538 <HAL_RCC_OscConfig+0x270>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a4:	f7ff fc3e 	bl	8000d24 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ac:	f7ff fc3a 	bl	8000d24 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e180      	b.n	80017c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014be:	4b1d      	ldr	r3, [pc, #116]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f0      	bne.n	80014ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d03a      	beq.n	800154c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d019      	beq.n	8001512 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014de:	4b17      	ldr	r3, [pc, #92]	@ (800153c <HAL_RCC_OscConfig+0x274>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e4:	f7ff fc1e 	bl	8000d24 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ec:	f7ff fc1a 	bl	8000d24 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e160      	b.n	80017c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 8001500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0f0      	beq.n	80014ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800150a:	2001      	movs	r0, #1
 800150c:	f000 faba 	bl	8001a84 <RCC_Delay>
 8001510:	e01c      	b.n	800154c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001512:	4b0a      	ldr	r3, [pc, #40]	@ (800153c <HAL_RCC_OscConfig+0x274>)
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001518:	f7ff fc04 	bl	8000d24 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800151e:	e00f      	b.n	8001540 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001520:	f7ff fc00 	bl	8000d24 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d908      	bls.n	8001540 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e146      	b.n	80017c0 <HAL_RCC_OscConfig+0x4f8>
 8001532:	bf00      	nop
 8001534:	40021000 	.word	0x40021000
 8001538:	42420000 	.word	0x42420000
 800153c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001540:	4b92      	ldr	r3, [pc, #584]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 8001542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1e9      	bne.n	8001520 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	2b00      	cmp	r3, #0
 8001556:	f000 80a6 	beq.w	80016a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800155a:	2300      	movs	r3, #0
 800155c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800155e:	4b8b      	ldr	r3, [pc, #556]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10d      	bne.n	8001586 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800156a:	4b88      	ldr	r3, [pc, #544]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	4a87      	ldr	r2, [pc, #540]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 8001570:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001574:	61d3      	str	r3, [r2, #28]
 8001576:	4b85      	ldr	r3, [pc, #532]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001582:	2301      	movs	r3, #1
 8001584:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001586:	4b82      	ldr	r3, [pc, #520]	@ (8001790 <HAL_RCC_OscConfig+0x4c8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800158e:	2b00      	cmp	r3, #0
 8001590:	d118      	bne.n	80015c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001592:	4b7f      	ldr	r3, [pc, #508]	@ (8001790 <HAL_RCC_OscConfig+0x4c8>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a7e      	ldr	r2, [pc, #504]	@ (8001790 <HAL_RCC_OscConfig+0x4c8>)
 8001598:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800159c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800159e:	f7ff fbc1 	bl	8000d24 <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015a6:	f7ff fbbd 	bl	8000d24 <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b64      	cmp	r3, #100	@ 0x64
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e103      	b.n	80017c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b8:	4b75      	ldr	r3, [pc, #468]	@ (8001790 <HAL_RCC_OscConfig+0x4c8>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0f0      	beq.n	80015a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d106      	bne.n	80015da <HAL_RCC_OscConfig+0x312>
 80015cc:	4b6f      	ldr	r3, [pc, #444]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 80015ce:	6a1b      	ldr	r3, [r3, #32]
 80015d0:	4a6e      	ldr	r2, [pc, #440]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 80015d2:	f043 0301 	orr.w	r3, r3, #1
 80015d6:	6213      	str	r3, [r2, #32]
 80015d8:	e02d      	b.n	8001636 <HAL_RCC_OscConfig+0x36e>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d10c      	bne.n	80015fc <HAL_RCC_OscConfig+0x334>
 80015e2:	4b6a      	ldr	r3, [pc, #424]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	4a69      	ldr	r2, [pc, #420]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 80015e8:	f023 0301 	bic.w	r3, r3, #1
 80015ec:	6213      	str	r3, [r2, #32]
 80015ee:	4b67      	ldr	r3, [pc, #412]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 80015f0:	6a1b      	ldr	r3, [r3, #32]
 80015f2:	4a66      	ldr	r2, [pc, #408]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 80015f4:	f023 0304 	bic.w	r3, r3, #4
 80015f8:	6213      	str	r3, [r2, #32]
 80015fa:	e01c      	b.n	8001636 <HAL_RCC_OscConfig+0x36e>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	2b05      	cmp	r3, #5
 8001602:	d10c      	bne.n	800161e <HAL_RCC_OscConfig+0x356>
 8001604:	4b61      	ldr	r3, [pc, #388]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	4a60      	ldr	r2, [pc, #384]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 800160a:	f043 0304 	orr.w	r3, r3, #4
 800160e:	6213      	str	r3, [r2, #32]
 8001610:	4b5e      	ldr	r3, [pc, #376]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	4a5d      	ldr	r2, [pc, #372]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	6213      	str	r3, [r2, #32]
 800161c:	e00b      	b.n	8001636 <HAL_RCC_OscConfig+0x36e>
 800161e:	4b5b      	ldr	r3, [pc, #364]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 8001620:	6a1b      	ldr	r3, [r3, #32]
 8001622:	4a5a      	ldr	r2, [pc, #360]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 8001624:	f023 0301 	bic.w	r3, r3, #1
 8001628:	6213      	str	r3, [r2, #32]
 800162a:	4b58      	ldr	r3, [pc, #352]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 800162c:	6a1b      	ldr	r3, [r3, #32]
 800162e:	4a57      	ldr	r2, [pc, #348]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 8001630:	f023 0304 	bic.w	r3, r3, #4
 8001634:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d015      	beq.n	800166a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800163e:	f7ff fb71 	bl	8000d24 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001644:	e00a      	b.n	800165c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001646:	f7ff fb6d 	bl	8000d24 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001654:	4293      	cmp	r3, r2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e0b1      	b.n	80017c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800165c:	4b4b      	ldr	r3, [pc, #300]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0ee      	beq.n	8001646 <HAL_RCC_OscConfig+0x37e>
 8001668:	e014      	b.n	8001694 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166a:	f7ff fb5b 	bl	8000d24 <HAL_GetTick>
 800166e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001670:	e00a      	b.n	8001688 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001672:	f7ff fb57 	bl	8000d24 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001680:	4293      	cmp	r3, r2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e09b      	b.n	80017c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001688:	4b40      	ldr	r3, [pc, #256]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1ee      	bne.n	8001672 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001694:	7dfb      	ldrb	r3, [r7, #23]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d105      	bne.n	80016a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800169a:	4b3c      	ldr	r3, [pc, #240]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	4a3b      	ldr	r2, [pc, #236]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 80016a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 8087 	beq.w	80017be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016b0:	4b36      	ldr	r3, [pc, #216]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 030c 	and.w	r3, r3, #12
 80016b8:	2b08      	cmp	r3, #8
 80016ba:	d061      	beq.n	8001780 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	69db      	ldr	r3, [r3, #28]
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d146      	bne.n	8001752 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016c4:	4b33      	ldr	r3, [pc, #204]	@ (8001794 <HAL_RCC_OscConfig+0x4cc>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ca:	f7ff fb2b 	bl	8000d24 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d2:	f7ff fb27 	bl	8000d24 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e06d      	b.n	80017c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016e4:	4b29      	ldr	r3, [pc, #164]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1f0      	bne.n	80016d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016f8:	d108      	bne.n	800170c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016fa:	4b24      	ldr	r3, [pc, #144]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	4921      	ldr	r1, [pc, #132]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 8001708:	4313      	orrs	r3, r2
 800170a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800170c:	4b1f      	ldr	r3, [pc, #124]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a19      	ldr	r1, [r3, #32]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800171c:	430b      	orrs	r3, r1
 800171e:	491b      	ldr	r1, [pc, #108]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 8001720:	4313      	orrs	r3, r2
 8001722:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001724:	4b1b      	ldr	r3, [pc, #108]	@ (8001794 <HAL_RCC_OscConfig+0x4cc>)
 8001726:	2201      	movs	r2, #1
 8001728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172a:	f7ff fafb 	bl	8000d24 <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001732:	f7ff faf7 	bl	8000d24 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e03d      	b.n	80017c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001744:	4b11      	ldr	r3, [pc, #68]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0f0      	beq.n	8001732 <HAL_RCC_OscConfig+0x46a>
 8001750:	e035      	b.n	80017be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001752:	4b10      	ldr	r3, [pc, #64]	@ (8001794 <HAL_RCC_OscConfig+0x4cc>)
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001758:	f7ff fae4 	bl	8000d24 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001760:	f7ff fae0 	bl	8000d24 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e026      	b.n	80017c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001772:	4b06      	ldr	r3, [pc, #24]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1f0      	bne.n	8001760 <HAL_RCC_OscConfig+0x498>
 800177e:	e01e      	b.n	80017be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69db      	ldr	r3, [r3, #28]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d107      	bne.n	8001798 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e019      	b.n	80017c0 <HAL_RCC_OscConfig+0x4f8>
 800178c:	40021000 	.word	0x40021000
 8001790:	40007000 	.word	0x40007000
 8001794:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001798:	4b0b      	ldr	r3, [pc, #44]	@ (80017c8 <HAL_RCC_OscConfig+0x500>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d106      	bne.n	80017ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d001      	beq.n	80017be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e000      	b.n	80017c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40021000 	.word	0x40021000

080017cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e0d0      	b.n	8001982 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017e0:	4b6a      	ldr	r3, [pc, #424]	@ (800198c <HAL_RCC_ClockConfig+0x1c0>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d910      	bls.n	8001810 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ee:	4b67      	ldr	r3, [pc, #412]	@ (800198c <HAL_RCC_ClockConfig+0x1c0>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f023 0207 	bic.w	r2, r3, #7
 80017f6:	4965      	ldr	r1, [pc, #404]	@ (800198c <HAL_RCC_ClockConfig+0x1c0>)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fe:	4b63      	ldr	r3, [pc, #396]	@ (800198c <HAL_RCC_ClockConfig+0x1c0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d001      	beq.n	8001810 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e0b8      	b.n	8001982 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d020      	beq.n	800185e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	2b00      	cmp	r3, #0
 8001826:	d005      	beq.n	8001834 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001828:	4b59      	ldr	r3, [pc, #356]	@ (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	4a58      	ldr	r2, [pc, #352]	@ (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 800182e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001832:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0308 	and.w	r3, r3, #8
 800183c:	2b00      	cmp	r3, #0
 800183e:	d005      	beq.n	800184c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001840:	4b53      	ldr	r3, [pc, #332]	@ (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	4a52      	ldr	r2, [pc, #328]	@ (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 8001846:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800184a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800184c:	4b50      	ldr	r3, [pc, #320]	@ (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	494d      	ldr	r1, [pc, #308]	@ (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 800185a:	4313      	orrs	r3, r2
 800185c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	2b00      	cmp	r3, #0
 8001868:	d040      	beq.n	80018ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d107      	bne.n	8001882 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001872:	4b47      	ldr	r3, [pc, #284]	@ (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d115      	bne.n	80018aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e07f      	b.n	8001982 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b02      	cmp	r3, #2
 8001888:	d107      	bne.n	800189a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800188a:	4b41      	ldr	r3, [pc, #260]	@ (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d109      	bne.n	80018aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e073      	b.n	8001982 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189a:	4b3d      	ldr	r3, [pc, #244]	@ (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e06b      	b.n	8001982 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018aa:	4b39      	ldr	r3, [pc, #228]	@ (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f023 0203 	bic.w	r2, r3, #3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	4936      	ldr	r1, [pc, #216]	@ (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018bc:	f7ff fa32 	bl	8000d24 <HAL_GetTick>
 80018c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c2:	e00a      	b.n	80018da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018c4:	f7ff fa2e 	bl	8000d24 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e053      	b.n	8001982 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018da:	4b2d      	ldr	r3, [pc, #180]	@ (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 020c 	and.w	r2, r3, #12
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d1eb      	bne.n	80018c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018ec:	4b27      	ldr	r3, [pc, #156]	@ (800198c <HAL_RCC_ClockConfig+0x1c0>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0307 	and.w	r3, r3, #7
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d210      	bcs.n	800191c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018fa:	4b24      	ldr	r3, [pc, #144]	@ (800198c <HAL_RCC_ClockConfig+0x1c0>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f023 0207 	bic.w	r2, r3, #7
 8001902:	4922      	ldr	r1, [pc, #136]	@ (800198c <HAL_RCC_ClockConfig+0x1c0>)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	4313      	orrs	r3, r2
 8001908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800190a:	4b20      	ldr	r3, [pc, #128]	@ (800198c <HAL_RCC_ClockConfig+0x1c0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	429a      	cmp	r2, r3
 8001916:	d001      	beq.n	800191c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e032      	b.n	8001982 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	d008      	beq.n	800193a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001928:	4b19      	ldr	r3, [pc, #100]	@ (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	4916      	ldr	r1, [pc, #88]	@ (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 8001936:	4313      	orrs	r3, r2
 8001938:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0308 	and.w	r3, r3, #8
 8001942:	2b00      	cmp	r3, #0
 8001944:	d009      	beq.n	800195a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001946:	4b12      	ldr	r3, [pc, #72]	@ (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	490e      	ldr	r1, [pc, #56]	@ (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 8001956:	4313      	orrs	r3, r2
 8001958:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800195a:	f000 f821 	bl	80019a0 <HAL_RCC_GetSysClockFreq>
 800195e:	4602      	mov	r2, r0
 8001960:	4b0b      	ldr	r3, [pc, #44]	@ (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	091b      	lsrs	r3, r3, #4
 8001966:	f003 030f 	and.w	r3, r3, #15
 800196a:	490a      	ldr	r1, [pc, #40]	@ (8001994 <HAL_RCC_ClockConfig+0x1c8>)
 800196c:	5ccb      	ldrb	r3, [r1, r3]
 800196e:	fa22 f303 	lsr.w	r3, r2, r3
 8001972:	4a09      	ldr	r2, [pc, #36]	@ (8001998 <HAL_RCC_ClockConfig+0x1cc>)
 8001974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001976:	4b09      	ldr	r3, [pc, #36]	@ (800199c <HAL_RCC_ClockConfig+0x1d0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff f990 	bl	8000ca0 <HAL_InitTick>

  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40022000 	.word	0x40022000
 8001990:	40021000 	.word	0x40021000
 8001994:	080034c0 	.word	0x080034c0
 8001998:	20000000 	.word	0x20000000
 800199c:	20000004 	.word	0x20000004

080019a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b087      	sub	sp, #28
 80019a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	2300      	movs	r3, #0
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
 80019b2:	2300      	movs	r3, #0
 80019b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0x94>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f003 030c 	and.w	r3, r3, #12
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	d002      	beq.n	80019d0 <HAL_RCC_GetSysClockFreq+0x30>
 80019ca:	2b08      	cmp	r3, #8
 80019cc:	d003      	beq.n	80019d6 <HAL_RCC_GetSysClockFreq+0x36>
 80019ce:	e027      	b.n	8001a20 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019d0:	4b19      	ldr	r3, [pc, #100]	@ (8001a38 <HAL_RCC_GetSysClockFreq+0x98>)
 80019d2:	613b      	str	r3, [r7, #16]
      break;
 80019d4:	e027      	b.n	8001a26 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	0c9b      	lsrs	r3, r3, #18
 80019da:	f003 030f 	and.w	r3, r3, #15
 80019de:	4a17      	ldr	r2, [pc, #92]	@ (8001a3c <HAL_RCC_GetSysClockFreq+0x9c>)
 80019e0:	5cd3      	ldrb	r3, [r2, r3]
 80019e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d010      	beq.n	8001a10 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019ee:	4b11      	ldr	r3, [pc, #68]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0x94>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	0c5b      	lsrs	r3, r3, #17
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	4a11      	ldr	r2, [pc, #68]	@ (8001a40 <HAL_RCC_GetSysClockFreq+0xa0>)
 80019fa:	5cd3      	ldrb	r3, [r2, r3]
 80019fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a0d      	ldr	r2, [pc, #52]	@ (8001a38 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a02:	fb03 f202 	mul.w	r2, r3, r2
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	e004      	b.n	8001a1a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a0c      	ldr	r2, [pc, #48]	@ (8001a44 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a14:	fb02 f303 	mul.w	r3, r2, r3
 8001a18:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	613b      	str	r3, [r7, #16]
      break;
 8001a1e:	e002      	b.n	8001a26 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a20:	4b05      	ldr	r3, [pc, #20]	@ (8001a38 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a22:	613b      	str	r3, [r7, #16]
      break;
 8001a24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a26:	693b      	ldr	r3, [r7, #16]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	371c      	adds	r7, #28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40021000 	.word	0x40021000
 8001a38:	007a1200 	.word	0x007a1200
 8001a3c:	080034d8 	.word	0x080034d8
 8001a40:	080034e8 	.word	0x080034e8
 8001a44:	003d0900 	.word	0x003d0900

08001a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a4c:	4b02      	ldr	r3, [pc, #8]	@ (8001a58 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr
 8001a58:	20000000 	.word	0x20000000

08001a5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a60:	f7ff fff2 	bl	8001a48 <HAL_RCC_GetHCLKFreq>
 8001a64:	4602      	mov	r2, r0
 8001a66:	4b05      	ldr	r3, [pc, #20]	@ (8001a7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	0adb      	lsrs	r3, r3, #11
 8001a6c:	f003 0307 	and.w	r3, r3, #7
 8001a70:	4903      	ldr	r1, [pc, #12]	@ (8001a80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a72:	5ccb      	ldrb	r3, [r1, r3]
 8001a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	080034d0 	.word	0x080034d0

08001a84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab8 <RCC_Delay+0x34>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a0a      	ldr	r2, [pc, #40]	@ (8001abc <RCC_Delay+0x38>)
 8001a92:	fba2 2303 	umull	r2, r3, r2, r3
 8001a96:	0a5b      	lsrs	r3, r3, #9
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	fb02 f303 	mul.w	r3, r2, r3
 8001a9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001aa0:	bf00      	nop
  }
  while (Delay --);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	1e5a      	subs	r2, r3, #1
 8001aa6:	60fa      	str	r2, [r7, #12]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1f9      	bne.n	8001aa0 <RCC_Delay+0x1c>
}
 8001aac:	bf00      	nop
 8001aae:	bf00      	nop
 8001ab0:	3714      	adds	r7, #20
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr
 8001ab8:	20000000 	.word	0x20000000
 8001abc:	10624dd3 	.word	0x10624dd3

08001ac0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	613b      	str	r3, [r7, #16]
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d07d      	beq.n	8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001adc:	2300      	movs	r3, #0
 8001ade:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ae0:	4b4f      	ldr	r3, [pc, #316]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ae2:	69db      	ldr	r3, [r3, #28]
 8001ae4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d10d      	bne.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aec:	4b4c      	ldr	r3, [pc, #304]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001aee:	69db      	ldr	r3, [r3, #28]
 8001af0:	4a4b      	ldr	r2, [pc, #300]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001af2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001af6:	61d3      	str	r3, [r2, #28]
 8001af8:	4b49      	ldr	r3, [pc, #292]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001afa:	69db      	ldr	r3, [r3, #28]
 8001afc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b04:	2301      	movs	r3, #1
 8001b06:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b08:	4b46      	ldr	r3, [pc, #280]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d118      	bne.n	8001b46 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b14:	4b43      	ldr	r3, [pc, #268]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a42      	ldr	r2, [pc, #264]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b20:	f7ff f900 	bl	8000d24 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b26:	e008      	b.n	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b28:	f7ff f8fc 	bl	8000d24 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b64      	cmp	r3, #100	@ 0x64
 8001b34:	d901      	bls.n	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e06d      	b.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b3a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0f0      	beq.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b46:	4b36      	ldr	r3, [pc, #216]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b48:	6a1b      	ldr	r3, [r3, #32]
 8001b4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b4e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d02e      	beq.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d027      	beq.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b64:	4b2e      	ldr	r3, [pc, #184]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b6c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b6e:	4b2e      	ldr	r3, [pc, #184]	@ (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b74:	4b2c      	ldr	r3, [pc, #176]	@ (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001b7a:	4a29      	ldr	r2, [pc, #164]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d014      	beq.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8a:	f7ff f8cb 	bl	8000d24 <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b90:	e00a      	b.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b92:	f7ff f8c7 	bl	8000d24 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e036      	b.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d0ee      	beq.n	8001b92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	4917      	ldr	r1, [pc, #92]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bc6:	7dfb      	ldrb	r3, [r7, #23]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d105      	bne.n	8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bcc:	4b14      	ldr	r3, [pc, #80]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bce:	69db      	ldr	r3, [r3, #28]
 8001bd0:	4a13      	ldr	r2, [pc, #76]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bd6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d008      	beq.n	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001be4:	4b0e      	ldr	r3, [pc, #56]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	490b      	ldr	r1, [pc, #44]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0310 	and.w	r3, r3, #16
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d008      	beq.n	8001c14 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c02:	4b07      	ldr	r3, [pc, #28]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	4904      	ldr	r1, [pc, #16]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c10:	4313      	orrs	r3, r2
 8001c12:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40021000 	.word	0x40021000
 8001c24:	40007000 	.word	0x40007000
 8001c28:	42420440 	.word	0x42420440

08001c2c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
 8001c38:	2300      	movs	r3, #0
 8001c3a:	61fb      	str	r3, [r7, #28]
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001c40:	2300      	movs	r3, #0
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	2300      	movs	r3, #0
 8001c46:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b10      	cmp	r3, #16
 8001c4c:	d00a      	beq.n	8001c64 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b10      	cmp	r3, #16
 8001c52:	f200 808a 	bhi.w	8001d6a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d045      	beq.n	8001ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d075      	beq.n	8001d4e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001c62:	e082      	b.n	8001d6a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8001c64:	4b46      	ldr	r3, [pc, #280]	@ (8001d80 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001c6a:	4b45      	ldr	r3, [pc, #276]	@ (8001d80 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d07b      	beq.n	8001d6e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	0c9b      	lsrs	r3, r3, #18
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	4a41      	ldr	r2, [pc, #260]	@ (8001d84 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8001c80:	5cd3      	ldrb	r3, [r2, r3]
 8001c82:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d015      	beq.n	8001cba <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c8e:	4b3c      	ldr	r3, [pc, #240]	@ (8001d80 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	0c5b      	lsrs	r3, r3, #17
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	4a3b      	ldr	r2, [pc, #236]	@ (8001d88 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8001c9a:	5cd3      	ldrb	r3, [r2, r3]
 8001c9c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d00d      	beq.n	8001cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001ca8:	4a38      	ldr	r2, [pc, #224]	@ (8001d8c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	fb02 f303 	mul.w	r3, r2, r3
 8001cb6:	61fb      	str	r3, [r7, #28]
 8001cb8:	e004      	b.n	8001cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	4a34      	ldr	r2, [pc, #208]	@ (8001d90 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8001cbe:	fb02 f303 	mul.w	r3, r2, r3
 8001cc2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001cc4:	4b2e      	ldr	r3, [pc, #184]	@ (8001d80 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ccc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001cd0:	d102      	bne.n	8001cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	61bb      	str	r3, [r7, #24]
      break;
 8001cd6:	e04a      	b.n	8001d6e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	4a2d      	ldr	r2, [pc, #180]	@ (8001d94 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001cde:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce2:	085b      	lsrs	r3, r3, #1
 8001ce4:	61bb      	str	r3, [r7, #24]
      break;
 8001ce6:	e042      	b.n	8001d6e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8001ce8:	4b25      	ldr	r3, [pc, #148]	@ (8001d80 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cf4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001cf8:	d108      	bne.n	8001d0c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8001d04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d08:	61bb      	str	r3, [r7, #24]
 8001d0a:	e01f      	b.n	8001d4c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d16:	d109      	bne.n	8001d2c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8001d18:	4b19      	ldr	r3, [pc, #100]	@ (8001d80 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d003      	beq.n	8001d2c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8001d24:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8001d28:	61bb      	str	r3, [r7, #24]
 8001d2a:	e00f      	b.n	8001d4c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001d36:	d11c      	bne.n	8001d72 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8001d38:	4b11      	ldr	r3, [pc, #68]	@ (8001d80 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d016      	beq.n	8001d72 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8001d44:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8001d48:	61bb      	str	r3, [r7, #24]
      break;
 8001d4a:	e012      	b.n	8001d72 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8001d4c:	e011      	b.n	8001d72 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001d4e:	f7ff fe85 	bl	8001a5c <HAL_RCC_GetPCLK2Freq>
 8001d52:	4602      	mov	r2, r0
 8001d54:	4b0a      	ldr	r3, [pc, #40]	@ (8001d80 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	0b9b      	lsrs	r3, r3, #14
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	3301      	adds	r3, #1
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d66:	61bb      	str	r3, [r7, #24]
      break;
 8001d68:	e004      	b.n	8001d74 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001d6a:	bf00      	nop
 8001d6c:	e002      	b.n	8001d74 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001d6e:	bf00      	nop
 8001d70:	e000      	b.n	8001d74 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001d72:	bf00      	nop
    }
  }
  return (frequency);
 8001d74:	69bb      	ldr	r3, [r7, #24]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3720      	adds	r7, #32
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40021000 	.word	0x40021000
 8001d84:	080034ec 	.word	0x080034ec
 8001d88:	080034fc 	.word	0x080034fc
 8001d8c:	007a1200 	.word	0x007a1200
 8001d90:	003d0900 	.word	0x003d0900
 8001d94:	aaaaaaab 	.word	0xaaaaaaab

08001d98 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e07a      	b.n	8001ea4 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	7c5b      	ldrb	r3, [r3, #17]
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d105      	bne.n	8001dc4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7fe fea6 	bl	8000b10 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 fbfa 	bl	80025c4 <HAL_RTC_WaitForSynchro>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d004      	beq.n	8001de0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2204      	movs	r2, #4
 8001dda:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e061      	b.n	8001ea4 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 fcb3 	bl	800274c <RTC_EnterInitMode>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d004      	beq.n	8001df6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2204      	movs	r2, #4
 8001df0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e056      	b.n	8001ea4 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 0207 	bic.w	r2, r2, #7
 8001e04:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d005      	beq.n	8001e1a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001e0e:	4b27      	ldr	r3, [pc, #156]	@ (8001eac <HAL_RTC_Init+0x114>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e12:	4a26      	ldr	r2, [pc, #152]	@ (8001eac <HAL_RTC_Init+0x114>)
 8001e14:	f023 0301 	bic.w	r3, r3, #1
 8001e18:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001e1a:	4b24      	ldr	r3, [pc, #144]	@ (8001eac <HAL_RTC_Init+0x114>)
 8001e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e1e:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	4921      	ldr	r1, [pc, #132]	@ (8001eac <HAL_RTC_Init+0x114>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e34:	d003      	beq.n	8001e3e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	e00e      	b.n	8001e5c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8001e3e:	2001      	movs	r0, #1
 8001e40:	f7ff fef4 	bl	8001c2c <HAL_RCCEx_GetPeriphCLKFreq>
 8001e44:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d104      	bne.n	8001e56 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2204      	movs	r2, #4
 8001e50:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e026      	b.n	8001ea4 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	0c1a      	lsrs	r2, r3, #16
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f002 020f 	and.w	r2, r2, #15
 8001e68:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	b292      	uxth	r2, r2
 8001e72:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 fc91 	bl	800279c <RTC_ExitInitMode>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d004      	beq.n	8001e8a <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2204      	movs	r2, #4
 8001e84:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e00c      	b.n	8001ea4 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
  }
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40006c00 	.word	0x40006c00

08001eb0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001eb0:	b590      	push	{r4, r7, lr}
 8001eb2:	b087      	sub	sp, #28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d002      	beq.n	8001ed0 <HAL_RTC_SetTime+0x20>
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e080      	b.n	8001fd6 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	7c1b      	ldrb	r3, [r3, #16]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d101      	bne.n	8001ee0 <HAL_RTC_SetTime+0x30>
 8001edc:	2302      	movs	r3, #2
 8001ede:	e07a      	b.n	8001fd6 <HAL_RTC_SetTime+0x126>
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2202      	movs	r2, #2
 8001eea:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d113      	bne.n	8001f1a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8001efc:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	785b      	ldrb	r3, [r3, #1]
 8001f04:	4619      	mov	r1, r3
 8001f06:	460b      	mov	r3, r1
 8001f08:	011b      	lsls	r3, r3, #4
 8001f0a:	1a5b      	subs	r3, r3, r1
 8001f0c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001f0e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8001f10:	68ba      	ldr	r2, [r7, #8]
 8001f12:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001f14:	4413      	add	r3, r2
 8001f16:	617b      	str	r3, [r7, #20]
 8001f18:	e01e      	b.n	8001f58 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f000 fc81 	bl	8002826 <RTC_Bcd2ToByte>
 8001f24:	4603      	mov	r3, r0
 8001f26:	461a      	mov	r2, r3
 8001f28:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8001f2c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	785b      	ldrb	r3, [r3, #1]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f000 fc76 	bl	8002826 <RTC_Bcd2ToByte>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4613      	mov	r3, r2
 8001f40:	011b      	lsls	r3, r3, #4
 8001f42:	1a9b      	subs	r3, r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001f46:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	789b      	ldrb	r3, [r3, #2]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f000 fc6a 	bl	8002826 <RTC_Bcd2ToByte>
 8001f52:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001f54:	4423      	add	r3, r4
 8001f56:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001f58:	6979      	ldr	r1, [r7, #20]
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f000 fb8f 	bl	800267e <RTC_WriteTimeCounter>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d007      	beq.n	8001f76 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2204      	movs	r2, #4
 8001f6a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e02f      	b.n	8001fd6 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0205 	bic.w	r2, r2, #5
 8001f84:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f000 fba0 	bl	80026cc <RTC_ReadAlarmCounter>
 8001f8c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f94:	d018      	beq.n	8001fc8 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d214      	bcs.n	8001fc8 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8001fa4:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8001fa8:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001faa:	6939      	ldr	r1, [r7, #16]
 8001fac:	68f8      	ldr	r0, [r7, #12]
 8001fae:	f000 fba6 	bl	80026fe <RTC_WriteAlarmCounter>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d007      	beq.n	8001fc8 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2204      	movs	r2, #4
 8001fbc:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e006      	b.n	8001fd6 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
  }
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	371c      	adds	r7, #28
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd90      	pop	{r4, r7, pc}
	...

08001fe0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b088      	sub	sp, #32
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	61bb      	str	r3, [r7, #24]
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	61fb      	str	r3, [r7, #28]
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d002      	beq.n	8002008 <HAL_RTC_GetTime+0x28>
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d101      	bne.n	800200c <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e0b5      	b.n	8002178 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e0ac      	b.n	8002178 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 fafd 	bl	800261e <RTC_ReadTimeCounter>
 8002024:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	4a55      	ldr	r2, [pc, #340]	@ (8002180 <HAL_RTC_GetTime+0x1a0>)
 800202a:	fba2 2303 	umull	r2, r3, r2, r3
 800202e:	0adb      	lsrs	r3, r3, #11
 8002030:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4b52      	ldr	r3, [pc, #328]	@ (8002180 <HAL_RTC_GetTime+0x1a0>)
 8002036:	fba3 1302 	umull	r1, r3, r3, r2
 800203a:	0adb      	lsrs	r3, r3, #11
 800203c:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8002040:	fb01 f303 	mul.w	r3, r1, r3
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	4a4f      	ldr	r2, [pc, #316]	@ (8002184 <HAL_RTC_GetTime+0x1a4>)
 8002048:	fba2 2303 	umull	r2, r3, r2, r3
 800204c:	095b      	lsrs	r3, r3, #5
 800204e:	b2da      	uxtb	r2, r3
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	4a4a      	ldr	r2, [pc, #296]	@ (8002180 <HAL_RTC_GetTime+0x1a0>)
 8002058:	fba2 1203 	umull	r1, r2, r2, r3
 800205c:	0ad2      	lsrs	r2, r2, #11
 800205e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8002062:	fb01 f202 	mul.w	r2, r1, r2
 8002066:	1a9a      	subs	r2, r3, r2
 8002068:	4b46      	ldr	r3, [pc, #280]	@ (8002184 <HAL_RTC_GetTime+0x1a4>)
 800206a:	fba3 1302 	umull	r1, r3, r3, r2
 800206e:	0959      	lsrs	r1, r3, #5
 8002070:	460b      	mov	r3, r1
 8002072:	011b      	lsls	r3, r3, #4
 8002074:	1a5b      	subs	r3, r3, r1
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	1ad1      	subs	r1, r2, r3
 800207a:	b2ca      	uxtb	r2, r1
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	2b17      	cmp	r3, #23
 8002084:	d955      	bls.n	8002132 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	4a3f      	ldr	r2, [pc, #252]	@ (8002188 <HAL_RTC_GetTime+0x1a8>)
 800208a:	fba2 2303 	umull	r2, r3, r2, r3
 800208e:	091b      	lsrs	r3, r3, #4
 8002090:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8002092:	6939      	ldr	r1, [r7, #16]
 8002094:	4b3c      	ldr	r3, [pc, #240]	@ (8002188 <HAL_RTC_GetTime+0x1a8>)
 8002096:	fba3 2301 	umull	r2, r3, r3, r1
 800209a:	091a      	lsrs	r2, r3, #4
 800209c:	4613      	mov	r3, r2
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	4413      	add	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	1aca      	subs	r2, r1, r3
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	f000 fb0d 	bl	80026cc <RTC_ReadAlarmCounter>
 80020b2:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80020ba:	d008      	beq.n	80020ce <HAL_RTC_GetTime+0xee>
 80020bc:	69fa      	ldr	r2, [r7, #28]
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d904      	bls.n	80020ce <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80020c4:	69fa      	ldr	r2, [r7, #28]
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	61fb      	str	r3, [r7, #28]
 80020cc:	e002      	b.n	80020d4 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80020ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020d2:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	4a2d      	ldr	r2, [pc, #180]	@ (800218c <HAL_RTC_GetTime+0x1ac>)
 80020d8:	fb02 f303 	mul.w	r3, r2, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80020e2:	69b9      	ldr	r1, [r7, #24]
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f000 faca 	bl	800267e <RTC_WriteTimeCounter>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e041      	b.n	8002178 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80020fa:	d00c      	beq.n	8002116 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80020fc:	69fa      	ldr	r2, [r7, #28]
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	4413      	add	r3, r2
 8002102:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002104:	69f9      	ldr	r1, [r7, #28]
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f000 faf9 	bl	80026fe <RTC_WriteAlarmCounter>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00a      	beq.n	8002128 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e030      	b.n	8002178 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002116:	69f9      	ldr	r1, [r7, #28]
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f000 faf0 	bl	80026fe <RTC_WriteAlarmCounter>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e027      	b.n	8002178 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8002128:	6979      	ldr	r1, [r7, #20]
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 fb98 	bl	8002860 <RTC_DateUpdate>
 8002130:	e003      	b.n	800213a <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	b2da      	uxtb	r2, r3
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d01a      	beq.n	8002176 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f000 fb51 	bl	80027ec <RTC_ByteToBcd2>
 800214a:	4603      	mov	r3, r0
 800214c:	461a      	mov	r2, r3
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	785b      	ldrb	r3, [r3, #1]
 8002156:	4618      	mov	r0, r3
 8002158:	f000 fb48 	bl	80027ec <RTC_ByteToBcd2>
 800215c:	4603      	mov	r3, r0
 800215e:	461a      	mov	r2, r3
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	789b      	ldrb	r3, [r3, #2]
 8002168:	4618      	mov	r0, r3
 800216a:	f000 fb3f 	bl	80027ec <RTC_ByteToBcd2>
 800216e:	4603      	mov	r3, r0
 8002170:	461a      	mov	r2, r3
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3720      	adds	r7, #32
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	91a2b3c5 	.word	0x91a2b3c5
 8002184:	88888889 	.word	0x88888889
 8002188:	aaaaaaab 	.word	0xaaaaaaab
 800218c:	00015180 	.word	0x00015180

08002190 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b088      	sub	sp, #32
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 800219c:	2300      	movs	r3, #0
 800219e:	61fb      	str	r3, [r7, #28]
 80021a0:	2300      	movs	r3, #0
 80021a2:	61bb      	str	r3, [r7, #24]
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d002      	beq.n	80021b4 <HAL_RTC_SetDate+0x24>
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d101      	bne.n	80021b8 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e097      	b.n	80022e8 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	7c1b      	ldrb	r3, [r3, #16]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d101      	bne.n	80021c4 <HAL_RTC_SetDate+0x34>
 80021c0:	2302      	movs	r3, #2
 80021c2:	e091      	b.n	80022e8 <HAL_RTC_SetDate+0x158>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2201      	movs	r2, #1
 80021c8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2202      	movs	r2, #2
 80021ce:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10c      	bne.n	80021f0 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	78da      	ldrb	r2, [r3, #3]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	785a      	ldrb	r2, [r3, #1]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	789a      	ldrb	r2, [r3, #2]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	739a      	strb	r2, [r3, #14]
 80021ee:	e01a      	b.n	8002226 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	78db      	ldrb	r3, [r3, #3]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f000 fb16 	bl	8002826 <RTC_Bcd2ToByte>
 80021fa:	4603      	mov	r3, r0
 80021fc:	461a      	mov	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	785b      	ldrb	r3, [r3, #1]
 8002206:	4618      	mov	r0, r3
 8002208:	f000 fb0d 	bl	8002826 <RTC_Bcd2ToByte>
 800220c:	4603      	mov	r3, r0
 800220e:	461a      	mov	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	789b      	ldrb	r3, [r3, #2]
 8002218:	4618      	mov	r0, r3
 800221a:	f000 fb04 	bl	8002826 <RTC_Bcd2ToByte>
 800221e:	4603      	mov	r3, r0
 8002220:	461a      	mov	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	7bdb      	ldrb	r3, [r3, #15]
 800222a:	4618      	mov	r0, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	7b59      	ldrb	r1, [r3, #13]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	7b9b      	ldrb	r3, [r3, #14]
 8002234:	461a      	mov	r2, r3
 8002236:	f000 fbef 	bl	8002a18 <RTC_WeekDayNum>
 800223a:	4603      	mov	r3, r0
 800223c:	461a      	mov	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	7b1a      	ldrb	r2, [r3, #12]
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f000 f9e7 	bl	800261e <RTC_ReadTimeCounter>
 8002250:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	4a26      	ldr	r2, [pc, #152]	@ (80022f0 <HAL_RTC_SetDate+0x160>)
 8002256:	fba2 2303 	umull	r2, r3, r2, r3
 800225a:	0adb      	lsrs	r3, r3, #11
 800225c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	2b18      	cmp	r3, #24
 8002262:	d93a      	bls.n	80022da <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	4a23      	ldr	r2, [pc, #140]	@ (80022f4 <HAL_RTC_SetDate+0x164>)
 8002268:	fba2 2303 	umull	r2, r3, r2, r3
 800226c:	091b      	lsrs	r3, r3, #4
 800226e:	4a22      	ldr	r2, [pc, #136]	@ (80022f8 <HAL_RTC_SetDate+0x168>)
 8002270:	fb02 f303 	mul.w	r3, r2, r3
 8002274:	69fa      	ldr	r2, [r7, #28]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800227a:	69f9      	ldr	r1, [r7, #28]
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f000 f9fe 	bl	800267e <RTC_WriteTimeCounter>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d007      	beq.n	8002298 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2204      	movs	r2, #4
 800228c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e027      	b.n	80022e8 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f000 fa17 	bl	80026cc <RTC_ReadAlarmCounter>
 800229e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80022a6:	d018      	beq.n	80022da <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d214      	bcs.n	80022da <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80022b6:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80022ba:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80022bc:	69b9      	ldr	r1, [r7, #24]
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f000 fa1d 	bl	80026fe <RTC_WriteAlarmCounter>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d007      	beq.n	80022da <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2204      	movs	r2, #4
 80022ce:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e006      	b.n	80022e8 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2201      	movs	r2, #1
 80022de:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3720      	adds	r7, #32
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	91a2b3c5 	.word	0x91a2b3c5
 80022f4:	aaaaaaab 	.word	0xaaaaaaab
 80022f8:	00015180 	.word	0x00015180

080022fc <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8002308:	f107 0314 	add.w	r3, r7, #20
 800230c:	2100      	movs	r1, #0
 800230e:	460a      	mov	r2, r1
 8002310:	801a      	strh	r2, [r3, #0]
 8002312:	460a      	mov	r2, r1
 8002314:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d002      	beq.n	8002322 <HAL_RTC_GetDate+0x26>
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e03a      	b.n	800239c <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8002326:	f107 0314 	add.w	r3, r7, #20
 800232a:	2200      	movs	r2, #0
 800232c:	4619      	mov	r1, r3
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f7ff fe56 	bl	8001fe0 <HAL_RTC_GetTime>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e02e      	b.n	800239c <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	7b1a      	ldrb	r2, [r3, #12]
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	7bda      	ldrb	r2, [r3, #15]
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	7b5a      	ldrb	r2, [r3, #13]
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	7b9a      	ldrb	r2, [r3, #14]
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d01a      	beq.n	800239a <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	78db      	ldrb	r3, [r3, #3]
 8002368:	4618      	mov	r0, r3
 800236a:	f000 fa3f 	bl	80027ec <RTC_ByteToBcd2>
 800236e:	4603      	mov	r3, r0
 8002370:	461a      	mov	r2, r3
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	785b      	ldrb	r3, [r3, #1]
 800237a:	4618      	mov	r0, r3
 800237c:	f000 fa36 	bl	80027ec <RTC_ByteToBcd2>
 8002380:	4603      	mov	r3, r0
 8002382:	461a      	mov	r2, r3
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	789b      	ldrb	r3, [r3, #2]
 800238c:	4618      	mov	r0, r3
 800238e:	f000 fa2d 	bl	80027ec <RTC_ByteToBcd2>
 8002392:	4603      	mov	r3, r0
 8002394:	461a      	mov	r2, r3
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3718      	adds	r7, #24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80023a4:	b590      	push	{r4, r7, lr}
 80023a6:	b089      	sub	sp, #36	@ 0x24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 80023b0:	2300      	movs	r3, #0
 80023b2:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 80023b4:	f107 0314 	add.w	r3, r7, #20
 80023b8:	2100      	movs	r1, #0
 80023ba:	460a      	mov	r2, r1
 80023bc:	801a      	strh	r2, [r3, #0]
 80023be:	460a      	mov	r2, r1
 80023c0:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d002      	beq.n	80023ce <HAL_RTC_SetAlarm+0x2a>
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_RTC_SetAlarm+0x2e>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e07d      	b.n	80024ce <HAL_RTC_SetAlarm+0x12a>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	7c1b      	ldrb	r3, [r3, #16]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d101      	bne.n	80023de <HAL_RTC_SetAlarm+0x3a>
 80023da:	2302      	movs	r3, #2
 80023dc:	e077      	b.n	80024ce <HAL_RTC_SetAlarm+0x12a>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2201      	movs	r2, #1
 80023e2:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2202      	movs	r2, #2
 80023e8:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80023ea:	f107 0314 	add.w	r3, r7, #20
 80023ee:	2200      	movs	r2, #0
 80023f0:	4619      	mov	r1, r3
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f7ff fdf4 	bl	8001fe0 <HAL_RTC_GetTime>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <HAL_RTC_SetAlarm+0x5e>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e065      	b.n	80024ce <HAL_RTC_SetAlarm+0x12a>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8002402:	7d3b      	ldrb	r3, [r7, #20]
 8002404:	461a      	mov	r2, r3
 8002406:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800240a:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 800240e:	7d7b      	ldrb	r3, [r7, #21]
 8002410:	4619      	mov	r1, r3
 8002412:	460b      	mov	r3, r1
 8002414:	011b      	lsls	r3, r3, #4
 8002416:	1a5b      	subs	r3, r3, r1
 8002418:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800241a:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 800241c:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800241e:	4413      	add	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d113      	bne.n	8002450 <HAL_RTC_SetAlarm+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	461a      	mov	r2, r3
 800242e:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8002432:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	785b      	ldrb	r3, [r3, #1]
 800243a:	4619      	mov	r1, r3
 800243c:	460b      	mov	r3, r1
 800243e:	011b      	lsls	r3, r3, #4
 8002440:	1a5b      	subs	r3, r3, r1
 8002442:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002444:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 800244a:	4413      	add	r3, r2
 800244c:	61fb      	str	r3, [r7, #28]
 800244e:	e01e      	b.n	800248e <HAL_RTC_SetAlarm+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	4618      	mov	r0, r3
 8002456:	f000 f9e6 	bl	8002826 <RTC_Bcd2ToByte>
 800245a:	4603      	mov	r3, r0
 800245c:	461a      	mov	r2, r3
 800245e:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8002462:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	785b      	ldrb	r3, [r3, #1]
 800246a:	4618      	mov	r0, r3
 800246c:	f000 f9db 	bl	8002826 <RTC_Bcd2ToByte>
 8002470:	4603      	mov	r3, r0
 8002472:	461a      	mov	r2, r3
 8002474:	4613      	mov	r3, r2
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	1a9b      	subs	r3, r3, r2
 800247a:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800247c:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	789b      	ldrb	r3, [r3, #2]
 8002482:	4618      	mov	r0, r3
 8002484:	f000 f9cf 	bl	8002826 <RTC_Bcd2ToByte>
 8002488:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800248a:	4423      	add	r3, r4
 800248c:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 800248e:	69fa      	ldr	r2, [r7, #28]
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	429a      	cmp	r2, r3
 8002494:	d205      	bcs.n	80024a2 <HAL_RTC_SetAlarm+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 800249c:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80024a0:	61fb      	str	r3, [r7, #28]
  }

  /* Write Alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80024a2:	69f9      	ldr	r1, [r7, #28]
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f000 f92a 	bl	80026fe <RTC_WriteAlarmCounter>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d007      	beq.n	80024c0 <HAL_RTC_SetAlarm+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2204      	movs	r2, #4
 80024b4:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e006      	b.n	80024ce <HAL_RTC_SetAlarm+0x12a>
  }
  else
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2201      	movs	r2, #1
 80024c4:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80024cc:	2300      	movs	r3, #0
  }
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3724      	adds	r7, #36	@ 0x24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd90      	pop	{r4, r7, pc}
	...

080024d8 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
 80024e4:	603b      	str	r3, [r7, #0]
  uint32_t counter_alarm = 0U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(Alarm);

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d002      	beq.n	80024f6 <HAL_RTC_GetAlarm+0x1e>
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_RTC_GetAlarm+0x22>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e05a      	b.n	80025b0 <HAL_RTC_GetAlarm+0xd8>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  /* Read Alarm counter in RTC registers */
  counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 f8e6 	bl	80026cc <RTC_ReadAlarmCounter>
 8002500:	6178      	str	r0, [r7, #20]

  /* Fill the structure with the read parameters */
  /* Set hours in a day range (between 0 to 24)*/
  sAlarm->AlarmTime.Hours   = (uint32_t)((counter_alarm / 3600U) % 24U);
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	4a2c      	ldr	r2, [pc, #176]	@ (80025b8 <HAL_RTC_GetAlarm+0xe0>)
 8002506:	fba2 2303 	umull	r2, r3, r2, r3
 800250a:	0ad9      	lsrs	r1, r3, #11
 800250c:	4b2b      	ldr	r3, [pc, #172]	@ (80025bc <HAL_RTC_GetAlarm+0xe4>)
 800250e:	fba3 2301 	umull	r2, r3, r3, r1
 8002512:	091a      	lsrs	r2, r3, #4
 8002514:	4613      	mov	r3, r2
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	4413      	add	r3, r2
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	1aca      	subs	r2, r1, r3
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes = (uint32_t)((counter_alarm % 3600U) / 60U);
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	4b24      	ldr	r3, [pc, #144]	@ (80025b8 <HAL_RTC_GetAlarm+0xe0>)
 8002528:	fba3 1302 	umull	r1, r3, r3, r2
 800252c:	0adb      	lsrs	r3, r3, #11
 800252e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8002532:	fb01 f303 	mul.w	r3, r1, r3
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	4a21      	ldr	r2, [pc, #132]	@ (80025c0 <HAL_RTC_GetAlarm+0xe8>)
 800253a:	fba2 2303 	umull	r2, r3, r2, r3
 800253e:	095b      	lsrs	r3, r3, #5
 8002540:	b2da      	uxtb	r2, r3
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds = (uint32_t)((counter_alarm % 3600U) % 60U);
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	4a1b      	ldr	r2, [pc, #108]	@ (80025b8 <HAL_RTC_GetAlarm+0xe0>)
 800254a:	fba2 1203 	umull	r1, r2, r2, r3
 800254e:	0ad2      	lsrs	r2, r2, #11
 8002550:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8002554:	fb01 f202 	mul.w	r2, r1, r2
 8002558:	1a9a      	subs	r2, r3, r2
 800255a:	4b19      	ldr	r3, [pc, #100]	@ (80025c0 <HAL_RTC_GetAlarm+0xe8>)
 800255c:	fba3 1302 	umull	r1, r3, r3, r2
 8002560:	0959      	lsrs	r1, r3, #5
 8002562:	460b      	mov	r3, r1
 8002564:	011b      	lsls	r3, r3, #4
 8002566:	1a5b      	subs	r3, r3, r1
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	1ad1      	subs	r1, r2, r3
 800256c:	b2ca      	uxtb	r2, r1
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	709a      	strb	r2, [r3, #2]

  if (Format != RTC_FORMAT_BIN)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d01a      	beq.n	80025ae <HAL_RTC_GetAlarm+0xd6>
  {
    sAlarm->AlarmTime.Hours   = RTC_ByteToBcd2(sAlarm->AlarmTime.Hours);
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f000 f935 	bl	80027ec <RTC_ByteToBcd2>
 8002582:	4603      	mov	r3, r0
 8002584:	461a      	mov	r2, r3
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes);
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	785b      	ldrb	r3, [r3, #1]
 800258e:	4618      	mov	r0, r3
 8002590:	f000 f92c 	bl	80027ec <RTC_ByteToBcd2>
 8002594:	4603      	mov	r3, r0
 8002596:	461a      	mov	r2, r3
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds);
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	789b      	ldrb	r3, [r3, #2]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f000 f923 	bl	80027ec <RTC_ByteToBcd2>
 80025a6:	4603      	mov	r3, r0
 80025a8:	461a      	mov	r2, r3
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	91a2b3c5 	.word	0x91a2b3c5
 80025bc:	aaaaaaab 	.word	0xaaaaaaab
 80025c0:	88888889 	.word	0x88888889

080025c4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e01d      	b.n	8002616 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 0208 	bic.w	r2, r2, #8
 80025e8:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80025ea:	f7fe fb9b 	bl	8000d24 <HAL_GetTick>
 80025ee:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80025f0:	e009      	b.n	8002606 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80025f2:	f7fe fb97 	bl	8000d24 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002600:	d901      	bls.n	8002606 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e007      	b.n	8002616 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0ee      	beq.n	80025f2 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800261e:	b480      	push	{r7}
 8002620:	b087      	sub	sp, #28
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8002626:	2300      	movs	r3, #0
 8002628:	827b      	strh	r3, [r7, #18]
 800262a:	2300      	movs	r3, #0
 800262c:	823b      	strh	r3, [r7, #16]
 800262e:	2300      	movs	r3, #0
 8002630:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8002632:	2300      	movs	r3, #0
 8002634:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800264e:	8a7a      	ldrh	r2, [r7, #18]
 8002650:	8a3b      	ldrh	r3, [r7, #16]
 8002652:	429a      	cmp	r2, r3
 8002654:	d008      	beq.n	8002668 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8002656:	8a3b      	ldrh	r3, [r7, #16]
 8002658:	041a      	lsls	r2, r3, #16
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	b29b      	uxth	r3, r3
 8002662:	4313      	orrs	r3, r2
 8002664:	617b      	str	r3, [r7, #20]
 8002666:	e004      	b.n	8002672 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002668:	8a7b      	ldrh	r3, [r7, #18]
 800266a:	041a      	lsls	r2, r3, #16
 800266c:	89fb      	ldrh	r3, [r7, #14]
 800266e:	4313      	orrs	r3, r2
 8002670:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8002672:	697b      	ldr	r3, [r7, #20]
}
 8002674:	4618      	mov	r0, r3
 8002676:	371c      	adds	r7, #28
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr

0800267e <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b084      	sub	sp, #16
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
 8002686:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002688:	2300      	movs	r3, #0
 800268a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 f85d 	bl	800274c <RTC_EnterInitMode>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d002      	beq.n	800269e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	73fb      	strb	r3, [r7, #15]
 800269c:	e011      	b.n	80026c2 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	0c12      	lsrs	r2, r2, #16
 80026a6:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	b292      	uxth	r2, r2
 80026b0:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f872 	bl	800279c <RTC_ExitInitMode>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	81fb      	strh	r3, [r7, #14]
 80026d8:	2300      	movs	r3, #0
 80026da:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ea:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80026ec:	89fb      	ldrh	r3, [r7, #14]
 80026ee:	041a      	lsls	r2, r3, #16
 80026f0:	89bb      	ldrh	r3, [r7, #12]
 80026f2:	4313      	orrs	r3, r2
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr

080026fe <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b084      	sub	sp, #16
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
 8002706:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002708:	2300      	movs	r3, #0
 800270a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 f81d 	bl	800274c <RTC_EnterInitMode>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d002      	beq.n	800271e <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
 800271c:	e011      	b.n	8002742 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	0c12      	lsrs	r2, r2, #16
 8002726:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	b292      	uxth	r2, r2
 8002730:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f832 	bl	800279c <RTC_ExitInitMode>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002742:	7bfb      	ldrb	r3, [r7, #15]
}
 8002744:	4618      	mov	r0, r3
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002758:	f7fe fae4 	bl	8000d24 <HAL_GetTick>
 800275c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800275e:	e009      	b.n	8002774 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002760:	f7fe fae0 	bl	8000d24 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800276e:	d901      	bls.n	8002774 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e00f      	b.n	8002794 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f003 0320 	and.w	r3, r3, #32
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0ee      	beq.n	8002760 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f042 0210 	orr.w	r2, r2, #16
 8002790:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 0210 	bic.w	r2, r2, #16
 80027b6:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80027b8:	f7fe fab4 	bl	8000d24 <HAL_GetTick>
 80027bc:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80027be:	e009      	b.n	80027d4 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80027c0:	f7fe fab0 	bl	8000d24 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80027ce:	d901      	bls.n	80027d4 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e007      	b.n	80027e4 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f003 0320 	and.w	r3, r3, #32
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0ee      	beq.n	80027c0 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80027fa:	e005      	b.n	8002808 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	3301      	adds	r3, #1
 8002800:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	3b0a      	subs	r3, #10
 8002806:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	2b09      	cmp	r3, #9
 800280c:	d8f6      	bhi.n	80027fc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	b2db      	uxtb	r3, r3
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	b2da      	uxtb	r2, r3
 8002816:	79fb      	ldrb	r3, [r7, #7]
 8002818:	4313      	orrs	r3, r2
 800281a:	b2db      	uxtb	r3, r3
}
 800281c:	4618      	mov	r0, r3
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr

08002826 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002826:	b480      	push	{r7}
 8002828:	b085      	sub	sp, #20
 800282a:	af00      	add	r7, sp, #0
 800282c:	4603      	mov	r3, r0
 800282e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002834:	79fb      	ldrb	r3, [r7, #7]
 8002836:	091b      	lsrs	r3, r3, #4
 8002838:	b2db      	uxtb	r3, r3
 800283a:	461a      	mov	r2, r3
 800283c:	4613      	mov	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002846:	79fb      	ldrb	r3, [r7, #7]
 8002848:	f003 030f 	and.w	r3, r3, #15
 800284c:	b2da      	uxtb	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	b2db      	uxtb	r3, r3
 8002852:	4413      	add	r3, r2
 8002854:	b2db      	uxtb	r3, r3
}
 8002856:	4618      	mov	r0, r3
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr

08002860 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800286a:	2300      	movs	r3, #0
 800286c:	617b      	str	r3, [r7, #20]
 800286e:	2300      	movs	r3, #0
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	2300      	movs	r3, #0
 8002874:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8002876:	2300      	movs	r3, #0
 8002878:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	7bdb      	ldrb	r3, [r3, #15]
 800287e:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	7b5b      	ldrb	r3, [r3, #13]
 8002884:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	7b9b      	ldrb	r3, [r3, #14]
 800288a:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 800288c:	2300      	movs	r3, #0
 800288e:	60bb      	str	r3, [r7, #8]
 8002890:	e06f      	b.n	8002972 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d011      	beq.n	80028bc <RTC_DateUpdate+0x5c>
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	2b03      	cmp	r3, #3
 800289c:	d00e      	beq.n	80028bc <RTC_DateUpdate+0x5c>
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	2b05      	cmp	r3, #5
 80028a2:	d00b      	beq.n	80028bc <RTC_DateUpdate+0x5c>
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	2b07      	cmp	r3, #7
 80028a8:	d008      	beq.n	80028bc <RTC_DateUpdate+0x5c>
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d005      	beq.n	80028bc <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	2b0a      	cmp	r3, #10
 80028b4:	d002      	beq.n	80028bc <RTC_DateUpdate+0x5c>
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	2b0c      	cmp	r3, #12
 80028ba:	d117      	bne.n	80028ec <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2b1e      	cmp	r3, #30
 80028c0:	d803      	bhi.n	80028ca <RTC_DateUpdate+0x6a>
      {
        day++;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	3301      	adds	r3, #1
 80028c6:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80028c8:	e050      	b.n	800296c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	2b0c      	cmp	r3, #12
 80028ce:	d005      	beq.n	80028dc <RTC_DateUpdate+0x7c>
        {
          month++;
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	3301      	adds	r3, #1
 80028d4:	613b      	str	r3, [r7, #16]
          day = 1U;
 80028d6:	2301      	movs	r3, #1
 80028d8:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80028da:	e047      	b.n	800296c <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80028dc:	2301      	movs	r3, #1
 80028de:	613b      	str	r3, [r7, #16]
          day = 1U;
 80028e0:	2301      	movs	r3, #1
 80028e2:	60fb      	str	r3, [r7, #12]
          year++;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	3301      	adds	r3, #1
 80028e8:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80028ea:	e03f      	b.n	800296c <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d008      	beq.n	8002904 <RTC_DateUpdate+0xa4>
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	2b06      	cmp	r3, #6
 80028f6:	d005      	beq.n	8002904 <RTC_DateUpdate+0xa4>
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	2b09      	cmp	r3, #9
 80028fc:	d002      	beq.n	8002904 <RTC_DateUpdate+0xa4>
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	2b0b      	cmp	r3, #11
 8002902:	d10c      	bne.n	800291e <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2b1d      	cmp	r3, #29
 8002908:	d803      	bhi.n	8002912 <RTC_DateUpdate+0xb2>
      {
        day++;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	3301      	adds	r3, #1
 800290e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002910:	e02c      	b.n	800296c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	3301      	adds	r3, #1
 8002916:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002918:	2301      	movs	r3, #1
 800291a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800291c:	e026      	b.n	800296c <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	2b02      	cmp	r3, #2
 8002922:	d123      	bne.n	800296c <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2b1b      	cmp	r3, #27
 8002928:	d803      	bhi.n	8002932 <RTC_DateUpdate+0xd2>
      {
        day++;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	3301      	adds	r3, #1
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	e01c      	b.n	800296c <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2b1c      	cmp	r3, #28
 8002936:	d111      	bne.n	800295c <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	b29b      	uxth	r3, r3
 800293c:	4618      	mov	r0, r3
 800293e:	f000 f839 	bl	80029b4 <RTC_IsLeapYear>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <RTC_DateUpdate+0xf0>
        {
          day++;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	3301      	adds	r3, #1
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	e00d      	b.n	800296c <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	3301      	adds	r3, #1
 8002954:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002956:	2301      	movs	r3, #1
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	e007      	b.n	800296c <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2b1d      	cmp	r3, #29
 8002960:	d104      	bne.n	800296c <RTC_DateUpdate+0x10c>
      {
        month++;
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	3301      	adds	r3, #1
 8002966:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002968:	2301      	movs	r3, #1
 800296a:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	3301      	adds	r3, #1
 8002970:	60bb      	str	r3, [r7, #8]
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	429a      	cmp	r2, r3
 8002978:	d38b      	bcc.n	8002892 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	b2da      	uxtb	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	b2da      	uxtb	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	b2da      	uxtb	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	b2db      	uxtb	r3, r3
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	4619      	mov	r1, r3
 800299c:	6978      	ldr	r0, [r7, #20]
 800299e:	f000 f83b 	bl	8002a18 <RTC_WeekDayNum>
 80029a2:	4603      	mov	r3, r0
 80029a4:	461a      	mov	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	731a      	strb	r2, [r3, #12]
}
 80029aa:	bf00      	nop
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
	...

080029b4 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80029be:	88fb      	ldrh	r3, [r7, #6]
 80029c0:	f003 0303 	and.w	r3, r3, #3
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	e01d      	b.n	8002a0a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80029ce:	88fb      	ldrh	r3, [r7, #6]
 80029d0:	4a10      	ldr	r2, [pc, #64]	@ (8002a14 <RTC_IsLeapYear+0x60>)
 80029d2:	fba2 1203 	umull	r1, r2, r2, r3
 80029d6:	0952      	lsrs	r2, r2, #5
 80029d8:	2164      	movs	r1, #100	@ 0x64
 80029da:	fb01 f202 	mul.w	r2, r1, r2
 80029de:	1a9b      	subs	r3, r3, r2
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e00f      	b.n	8002a0a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80029ea:	88fb      	ldrh	r3, [r7, #6]
 80029ec:	4a09      	ldr	r2, [pc, #36]	@ (8002a14 <RTC_IsLeapYear+0x60>)
 80029ee:	fba2 1203 	umull	r1, r2, r2, r3
 80029f2:	09d2      	lsrs	r2, r2, #7
 80029f4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80029f8:	fb01 f202 	mul.w	r2, r1, r2
 80029fc:	1a9b      	subs	r3, r3, r2
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e000      	b.n	8002a0a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8002a08:	2300      	movs	r3, #0
  }
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr
 8002a14:	51eb851f 	.word	0x51eb851f

08002a18 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	460b      	mov	r3, r1
 8002a22:	70fb      	strb	r3, [r7, #3]
 8002a24:	4613      	mov	r3, r2
 8002a26:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	60bb      	str	r3, [r7, #8]
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8002a36:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8002a38:	78fb      	ldrb	r3, [r7, #3]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d82d      	bhi.n	8002a9a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8002a3e:	78fa      	ldrb	r2, [r7, #3]
 8002a40:	4613      	mov	r3, r2
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	4413      	add	r3, r2
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	1a9b      	subs	r3, r3, r2
 8002a4a:	4a2c      	ldr	r2, [pc, #176]	@ (8002afc <RTC_WeekDayNum+0xe4>)
 8002a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a50:	085a      	lsrs	r2, r3, #1
 8002a52:	78bb      	ldrb	r3, [r7, #2]
 8002a54:	441a      	add	r2, r3
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	441a      	add	r2, r3
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	089b      	lsrs	r3, r3, #2
 8002a60:	441a      	add	r2, r3
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	3b01      	subs	r3, #1
 8002a66:	4926      	ldr	r1, [pc, #152]	@ (8002b00 <RTC_WeekDayNum+0xe8>)
 8002a68:	fba1 1303 	umull	r1, r3, r1, r3
 8002a6c:	095b      	lsrs	r3, r3, #5
 8002a6e:	1ad2      	subs	r2, r2, r3
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	3b01      	subs	r3, #1
 8002a74:	4922      	ldr	r1, [pc, #136]	@ (8002b00 <RTC_WeekDayNum+0xe8>)
 8002a76:	fba1 1303 	umull	r1, r3, r1, r3
 8002a7a:	09db      	lsrs	r3, r3, #7
 8002a7c:	4413      	add	r3, r2
 8002a7e:	1d1a      	adds	r2, r3, #4
 8002a80:	4b20      	ldr	r3, [pc, #128]	@ (8002b04 <RTC_WeekDayNum+0xec>)
 8002a82:	fba3 1302 	umull	r1, r3, r3, r2
 8002a86:	1ad1      	subs	r1, r2, r3
 8002a88:	0849      	lsrs	r1, r1, #1
 8002a8a:	440b      	add	r3, r1
 8002a8c:	0899      	lsrs	r1, r3, #2
 8002a8e:	460b      	mov	r3, r1
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	1a5b      	subs	r3, r3, r1
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	e029      	b.n	8002aee <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8002a9a:	78fa      	ldrb	r2, [r7, #3]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	4413      	add	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	1a9b      	subs	r3, r3, r2
 8002aa6:	4a15      	ldr	r2, [pc, #84]	@ (8002afc <RTC_WeekDayNum+0xe4>)
 8002aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aac:	085a      	lsrs	r2, r3, #1
 8002aae:	78bb      	ldrb	r3, [r7, #2]
 8002ab0:	441a      	add	r2, r3
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	441a      	add	r2, r3
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	089b      	lsrs	r3, r3, #2
 8002aba:	441a      	add	r2, r3
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	4910      	ldr	r1, [pc, #64]	@ (8002b00 <RTC_WeekDayNum+0xe8>)
 8002ac0:	fba1 1303 	umull	r1, r3, r1, r3
 8002ac4:	095b      	lsrs	r3, r3, #5
 8002ac6:	1ad2      	subs	r2, r2, r3
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	490d      	ldr	r1, [pc, #52]	@ (8002b00 <RTC_WeekDayNum+0xe8>)
 8002acc:	fba1 1303 	umull	r1, r3, r1, r3
 8002ad0:	09db      	lsrs	r3, r3, #7
 8002ad2:	4413      	add	r3, r2
 8002ad4:	1c9a      	adds	r2, r3, #2
 8002ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8002b04 <RTC_WeekDayNum+0xec>)
 8002ad8:	fba3 1302 	umull	r1, r3, r3, r2
 8002adc:	1ad1      	subs	r1, r2, r3
 8002ade:	0849      	lsrs	r1, r1, #1
 8002ae0:	440b      	add	r3, r1
 8002ae2:	0899      	lsrs	r1, r3, #2
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	1a5b      	subs	r3, r3, r1
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	b2db      	uxtb	r3, r3
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc80      	pop	{r7}
 8002afa:	4770      	bx	lr
 8002afc:	38e38e39 	.word	0x38e38e39
 8002b00:	51eb851f 	.word	0x51eb851f
 8002b04:	24924925 	.word	0x24924925

08002b08 <siprintf>:
 8002b08:	b40e      	push	{r1, r2, r3}
 8002b0a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002b0e:	b500      	push	{lr}
 8002b10:	b09c      	sub	sp, #112	@ 0x70
 8002b12:	ab1d      	add	r3, sp, #116	@ 0x74
 8002b14:	9002      	str	r0, [sp, #8]
 8002b16:	9006      	str	r0, [sp, #24]
 8002b18:	9107      	str	r1, [sp, #28]
 8002b1a:	9104      	str	r1, [sp, #16]
 8002b1c:	4808      	ldr	r0, [pc, #32]	@ (8002b40 <siprintf+0x38>)
 8002b1e:	4909      	ldr	r1, [pc, #36]	@ (8002b44 <siprintf+0x3c>)
 8002b20:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b24:	9105      	str	r1, [sp, #20]
 8002b26:	6800      	ldr	r0, [r0, #0]
 8002b28:	a902      	add	r1, sp, #8
 8002b2a:	9301      	str	r3, [sp, #4]
 8002b2c:	f000 f89c 	bl	8002c68 <_svfiprintf_r>
 8002b30:	2200      	movs	r2, #0
 8002b32:	9b02      	ldr	r3, [sp, #8]
 8002b34:	701a      	strb	r2, [r3, #0]
 8002b36:	b01c      	add	sp, #112	@ 0x70
 8002b38:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b3c:	b003      	add	sp, #12
 8002b3e:	4770      	bx	lr
 8002b40:	2000000c 	.word	0x2000000c
 8002b44:	ffff0208 	.word	0xffff0208

08002b48 <memset>:
 8002b48:	4603      	mov	r3, r0
 8002b4a:	4402      	add	r2, r0
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d100      	bne.n	8002b52 <memset+0xa>
 8002b50:	4770      	bx	lr
 8002b52:	f803 1b01 	strb.w	r1, [r3], #1
 8002b56:	e7f9      	b.n	8002b4c <memset+0x4>

08002b58 <__errno>:
 8002b58:	4b01      	ldr	r3, [pc, #4]	@ (8002b60 <__errno+0x8>)
 8002b5a:	6818      	ldr	r0, [r3, #0]
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	2000000c 	.word	0x2000000c

08002b64 <__libc_init_array>:
 8002b64:	b570      	push	{r4, r5, r6, lr}
 8002b66:	2600      	movs	r6, #0
 8002b68:	4d0c      	ldr	r5, [pc, #48]	@ (8002b9c <__libc_init_array+0x38>)
 8002b6a:	4c0d      	ldr	r4, [pc, #52]	@ (8002ba0 <__libc_init_array+0x3c>)
 8002b6c:	1b64      	subs	r4, r4, r5
 8002b6e:	10a4      	asrs	r4, r4, #2
 8002b70:	42a6      	cmp	r6, r4
 8002b72:	d109      	bne.n	8002b88 <__libc_init_array+0x24>
 8002b74:	f000 fc78 	bl	8003468 <_init>
 8002b78:	2600      	movs	r6, #0
 8002b7a:	4d0a      	ldr	r5, [pc, #40]	@ (8002ba4 <__libc_init_array+0x40>)
 8002b7c:	4c0a      	ldr	r4, [pc, #40]	@ (8002ba8 <__libc_init_array+0x44>)
 8002b7e:	1b64      	subs	r4, r4, r5
 8002b80:	10a4      	asrs	r4, r4, #2
 8002b82:	42a6      	cmp	r6, r4
 8002b84:	d105      	bne.n	8002b92 <__libc_init_array+0x2e>
 8002b86:	bd70      	pop	{r4, r5, r6, pc}
 8002b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b8c:	4798      	blx	r3
 8002b8e:	3601      	adds	r6, #1
 8002b90:	e7ee      	b.n	8002b70 <__libc_init_array+0xc>
 8002b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b96:	4798      	blx	r3
 8002b98:	3601      	adds	r6, #1
 8002b9a:	e7f2      	b.n	8002b82 <__libc_init_array+0x1e>
 8002b9c:	08003534 	.word	0x08003534
 8002ba0:	08003534 	.word	0x08003534
 8002ba4:	08003534 	.word	0x08003534
 8002ba8:	08003538 	.word	0x08003538

08002bac <__retarget_lock_acquire_recursive>:
 8002bac:	4770      	bx	lr

08002bae <__retarget_lock_release_recursive>:
 8002bae:	4770      	bx	lr

08002bb0 <__ssputs_r>:
 8002bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bb4:	461f      	mov	r7, r3
 8002bb6:	688e      	ldr	r6, [r1, #8]
 8002bb8:	4682      	mov	sl, r0
 8002bba:	42be      	cmp	r6, r7
 8002bbc:	460c      	mov	r4, r1
 8002bbe:	4690      	mov	r8, r2
 8002bc0:	680b      	ldr	r3, [r1, #0]
 8002bc2:	d82d      	bhi.n	8002c20 <__ssputs_r+0x70>
 8002bc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002bc8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002bcc:	d026      	beq.n	8002c1c <__ssputs_r+0x6c>
 8002bce:	6965      	ldr	r5, [r4, #20]
 8002bd0:	6909      	ldr	r1, [r1, #16]
 8002bd2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002bd6:	eba3 0901 	sub.w	r9, r3, r1
 8002bda:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002bde:	1c7b      	adds	r3, r7, #1
 8002be0:	444b      	add	r3, r9
 8002be2:	106d      	asrs	r5, r5, #1
 8002be4:	429d      	cmp	r5, r3
 8002be6:	bf38      	it	cc
 8002be8:	461d      	movcc	r5, r3
 8002bea:	0553      	lsls	r3, r2, #21
 8002bec:	d527      	bpl.n	8002c3e <__ssputs_r+0x8e>
 8002bee:	4629      	mov	r1, r5
 8002bf0:	f000 f958 	bl	8002ea4 <_malloc_r>
 8002bf4:	4606      	mov	r6, r0
 8002bf6:	b360      	cbz	r0, 8002c52 <__ssputs_r+0xa2>
 8002bf8:	464a      	mov	r2, r9
 8002bfa:	6921      	ldr	r1, [r4, #16]
 8002bfc:	f000 fbd6 	bl	80033ac <memcpy>
 8002c00:	89a3      	ldrh	r3, [r4, #12]
 8002c02:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002c06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c0a:	81a3      	strh	r3, [r4, #12]
 8002c0c:	6126      	str	r6, [r4, #16]
 8002c0e:	444e      	add	r6, r9
 8002c10:	6026      	str	r6, [r4, #0]
 8002c12:	463e      	mov	r6, r7
 8002c14:	6165      	str	r5, [r4, #20]
 8002c16:	eba5 0509 	sub.w	r5, r5, r9
 8002c1a:	60a5      	str	r5, [r4, #8]
 8002c1c:	42be      	cmp	r6, r7
 8002c1e:	d900      	bls.n	8002c22 <__ssputs_r+0x72>
 8002c20:	463e      	mov	r6, r7
 8002c22:	4632      	mov	r2, r6
 8002c24:	4641      	mov	r1, r8
 8002c26:	6820      	ldr	r0, [r4, #0]
 8002c28:	f000 fb88 	bl	800333c <memmove>
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	68a3      	ldr	r3, [r4, #8]
 8002c30:	1b9b      	subs	r3, r3, r6
 8002c32:	60a3      	str	r3, [r4, #8]
 8002c34:	6823      	ldr	r3, [r4, #0]
 8002c36:	4433      	add	r3, r6
 8002c38:	6023      	str	r3, [r4, #0]
 8002c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c3e:	462a      	mov	r2, r5
 8002c40:	f000 fb4e 	bl	80032e0 <_realloc_r>
 8002c44:	4606      	mov	r6, r0
 8002c46:	2800      	cmp	r0, #0
 8002c48:	d1e0      	bne.n	8002c0c <__ssputs_r+0x5c>
 8002c4a:	4650      	mov	r0, sl
 8002c4c:	6921      	ldr	r1, [r4, #16]
 8002c4e:	f000 fbbb 	bl	80033c8 <_free_r>
 8002c52:	230c      	movs	r3, #12
 8002c54:	f8ca 3000 	str.w	r3, [sl]
 8002c58:	89a3      	ldrh	r3, [r4, #12]
 8002c5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c62:	81a3      	strh	r3, [r4, #12]
 8002c64:	e7e9      	b.n	8002c3a <__ssputs_r+0x8a>
	...

08002c68 <_svfiprintf_r>:
 8002c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c6c:	4698      	mov	r8, r3
 8002c6e:	898b      	ldrh	r3, [r1, #12]
 8002c70:	4607      	mov	r7, r0
 8002c72:	061b      	lsls	r3, r3, #24
 8002c74:	460d      	mov	r5, r1
 8002c76:	4614      	mov	r4, r2
 8002c78:	b09d      	sub	sp, #116	@ 0x74
 8002c7a:	d510      	bpl.n	8002c9e <_svfiprintf_r+0x36>
 8002c7c:	690b      	ldr	r3, [r1, #16]
 8002c7e:	b973      	cbnz	r3, 8002c9e <_svfiprintf_r+0x36>
 8002c80:	2140      	movs	r1, #64	@ 0x40
 8002c82:	f000 f90f 	bl	8002ea4 <_malloc_r>
 8002c86:	6028      	str	r0, [r5, #0]
 8002c88:	6128      	str	r0, [r5, #16]
 8002c8a:	b930      	cbnz	r0, 8002c9a <_svfiprintf_r+0x32>
 8002c8c:	230c      	movs	r3, #12
 8002c8e:	603b      	str	r3, [r7, #0]
 8002c90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c94:	b01d      	add	sp, #116	@ 0x74
 8002c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c9a:	2340      	movs	r3, #64	@ 0x40
 8002c9c:	616b      	str	r3, [r5, #20]
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ca2:	2320      	movs	r3, #32
 8002ca4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002ca8:	2330      	movs	r3, #48	@ 0x30
 8002caa:	f04f 0901 	mov.w	r9, #1
 8002cae:	f8cd 800c 	str.w	r8, [sp, #12]
 8002cb2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002e4c <_svfiprintf_r+0x1e4>
 8002cb6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002cba:	4623      	mov	r3, r4
 8002cbc:	469a      	mov	sl, r3
 8002cbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002cc2:	b10a      	cbz	r2, 8002cc8 <_svfiprintf_r+0x60>
 8002cc4:	2a25      	cmp	r2, #37	@ 0x25
 8002cc6:	d1f9      	bne.n	8002cbc <_svfiprintf_r+0x54>
 8002cc8:	ebba 0b04 	subs.w	fp, sl, r4
 8002ccc:	d00b      	beq.n	8002ce6 <_svfiprintf_r+0x7e>
 8002cce:	465b      	mov	r3, fp
 8002cd0:	4622      	mov	r2, r4
 8002cd2:	4629      	mov	r1, r5
 8002cd4:	4638      	mov	r0, r7
 8002cd6:	f7ff ff6b 	bl	8002bb0 <__ssputs_r>
 8002cda:	3001      	adds	r0, #1
 8002cdc:	f000 80a7 	beq.w	8002e2e <_svfiprintf_r+0x1c6>
 8002ce0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002ce2:	445a      	add	r2, fp
 8002ce4:	9209      	str	r2, [sp, #36]	@ 0x24
 8002ce6:	f89a 3000 	ldrb.w	r3, [sl]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 809f 	beq.w	8002e2e <_svfiprintf_r+0x1c6>
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002cf6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002cfa:	f10a 0a01 	add.w	sl, sl, #1
 8002cfe:	9304      	str	r3, [sp, #16]
 8002d00:	9307      	str	r3, [sp, #28]
 8002d02:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002d06:	931a      	str	r3, [sp, #104]	@ 0x68
 8002d08:	4654      	mov	r4, sl
 8002d0a:	2205      	movs	r2, #5
 8002d0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d10:	484e      	ldr	r0, [pc, #312]	@ (8002e4c <_svfiprintf_r+0x1e4>)
 8002d12:	f000 fb3d 	bl	8003390 <memchr>
 8002d16:	9a04      	ldr	r2, [sp, #16]
 8002d18:	b9d8      	cbnz	r0, 8002d52 <_svfiprintf_r+0xea>
 8002d1a:	06d0      	lsls	r0, r2, #27
 8002d1c:	bf44      	itt	mi
 8002d1e:	2320      	movmi	r3, #32
 8002d20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d24:	0711      	lsls	r1, r2, #28
 8002d26:	bf44      	itt	mi
 8002d28:	232b      	movmi	r3, #43	@ 0x2b
 8002d2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d2e:	f89a 3000 	ldrb.w	r3, [sl]
 8002d32:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d34:	d015      	beq.n	8002d62 <_svfiprintf_r+0xfa>
 8002d36:	4654      	mov	r4, sl
 8002d38:	2000      	movs	r0, #0
 8002d3a:	f04f 0c0a 	mov.w	ip, #10
 8002d3e:	9a07      	ldr	r2, [sp, #28]
 8002d40:	4621      	mov	r1, r4
 8002d42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d46:	3b30      	subs	r3, #48	@ 0x30
 8002d48:	2b09      	cmp	r3, #9
 8002d4a:	d94b      	bls.n	8002de4 <_svfiprintf_r+0x17c>
 8002d4c:	b1b0      	cbz	r0, 8002d7c <_svfiprintf_r+0x114>
 8002d4e:	9207      	str	r2, [sp, #28]
 8002d50:	e014      	b.n	8002d7c <_svfiprintf_r+0x114>
 8002d52:	eba0 0308 	sub.w	r3, r0, r8
 8002d56:	fa09 f303 	lsl.w	r3, r9, r3
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	46a2      	mov	sl, r4
 8002d5e:	9304      	str	r3, [sp, #16]
 8002d60:	e7d2      	b.n	8002d08 <_svfiprintf_r+0xa0>
 8002d62:	9b03      	ldr	r3, [sp, #12]
 8002d64:	1d19      	adds	r1, r3, #4
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	9103      	str	r1, [sp, #12]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	bfbb      	ittet	lt
 8002d6e:	425b      	neglt	r3, r3
 8002d70:	f042 0202 	orrlt.w	r2, r2, #2
 8002d74:	9307      	strge	r3, [sp, #28]
 8002d76:	9307      	strlt	r3, [sp, #28]
 8002d78:	bfb8      	it	lt
 8002d7a:	9204      	strlt	r2, [sp, #16]
 8002d7c:	7823      	ldrb	r3, [r4, #0]
 8002d7e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002d80:	d10a      	bne.n	8002d98 <_svfiprintf_r+0x130>
 8002d82:	7863      	ldrb	r3, [r4, #1]
 8002d84:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d86:	d132      	bne.n	8002dee <_svfiprintf_r+0x186>
 8002d88:	9b03      	ldr	r3, [sp, #12]
 8002d8a:	3402      	adds	r4, #2
 8002d8c:	1d1a      	adds	r2, r3, #4
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	9203      	str	r2, [sp, #12]
 8002d92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002d96:	9305      	str	r3, [sp, #20]
 8002d98:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002e50 <_svfiprintf_r+0x1e8>
 8002d9c:	2203      	movs	r2, #3
 8002d9e:	4650      	mov	r0, sl
 8002da0:	7821      	ldrb	r1, [r4, #0]
 8002da2:	f000 faf5 	bl	8003390 <memchr>
 8002da6:	b138      	cbz	r0, 8002db8 <_svfiprintf_r+0x150>
 8002da8:	2240      	movs	r2, #64	@ 0x40
 8002daa:	9b04      	ldr	r3, [sp, #16]
 8002dac:	eba0 000a 	sub.w	r0, r0, sl
 8002db0:	4082      	lsls	r2, r0
 8002db2:	4313      	orrs	r3, r2
 8002db4:	3401      	adds	r4, #1
 8002db6:	9304      	str	r3, [sp, #16]
 8002db8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002dbc:	2206      	movs	r2, #6
 8002dbe:	4825      	ldr	r0, [pc, #148]	@ (8002e54 <_svfiprintf_r+0x1ec>)
 8002dc0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002dc4:	f000 fae4 	bl	8003390 <memchr>
 8002dc8:	2800      	cmp	r0, #0
 8002dca:	d036      	beq.n	8002e3a <_svfiprintf_r+0x1d2>
 8002dcc:	4b22      	ldr	r3, [pc, #136]	@ (8002e58 <_svfiprintf_r+0x1f0>)
 8002dce:	bb1b      	cbnz	r3, 8002e18 <_svfiprintf_r+0x1b0>
 8002dd0:	9b03      	ldr	r3, [sp, #12]
 8002dd2:	3307      	adds	r3, #7
 8002dd4:	f023 0307 	bic.w	r3, r3, #7
 8002dd8:	3308      	adds	r3, #8
 8002dda:	9303      	str	r3, [sp, #12]
 8002ddc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002dde:	4433      	add	r3, r6
 8002de0:	9309      	str	r3, [sp, #36]	@ 0x24
 8002de2:	e76a      	b.n	8002cba <_svfiprintf_r+0x52>
 8002de4:	460c      	mov	r4, r1
 8002de6:	2001      	movs	r0, #1
 8002de8:	fb0c 3202 	mla	r2, ip, r2, r3
 8002dec:	e7a8      	b.n	8002d40 <_svfiprintf_r+0xd8>
 8002dee:	2300      	movs	r3, #0
 8002df0:	f04f 0c0a 	mov.w	ip, #10
 8002df4:	4619      	mov	r1, r3
 8002df6:	3401      	adds	r4, #1
 8002df8:	9305      	str	r3, [sp, #20]
 8002dfa:	4620      	mov	r0, r4
 8002dfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e00:	3a30      	subs	r2, #48	@ 0x30
 8002e02:	2a09      	cmp	r2, #9
 8002e04:	d903      	bls.n	8002e0e <_svfiprintf_r+0x1a6>
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0c6      	beq.n	8002d98 <_svfiprintf_r+0x130>
 8002e0a:	9105      	str	r1, [sp, #20]
 8002e0c:	e7c4      	b.n	8002d98 <_svfiprintf_r+0x130>
 8002e0e:	4604      	mov	r4, r0
 8002e10:	2301      	movs	r3, #1
 8002e12:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e16:	e7f0      	b.n	8002dfa <_svfiprintf_r+0x192>
 8002e18:	ab03      	add	r3, sp, #12
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	462a      	mov	r2, r5
 8002e1e:	4638      	mov	r0, r7
 8002e20:	4b0e      	ldr	r3, [pc, #56]	@ (8002e5c <_svfiprintf_r+0x1f4>)
 8002e22:	a904      	add	r1, sp, #16
 8002e24:	f3af 8000 	nop.w
 8002e28:	1c42      	adds	r2, r0, #1
 8002e2a:	4606      	mov	r6, r0
 8002e2c:	d1d6      	bne.n	8002ddc <_svfiprintf_r+0x174>
 8002e2e:	89ab      	ldrh	r3, [r5, #12]
 8002e30:	065b      	lsls	r3, r3, #25
 8002e32:	f53f af2d 	bmi.w	8002c90 <_svfiprintf_r+0x28>
 8002e36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002e38:	e72c      	b.n	8002c94 <_svfiprintf_r+0x2c>
 8002e3a:	ab03      	add	r3, sp, #12
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	462a      	mov	r2, r5
 8002e40:	4638      	mov	r0, r7
 8002e42:	4b06      	ldr	r3, [pc, #24]	@ (8002e5c <_svfiprintf_r+0x1f4>)
 8002e44:	a904      	add	r1, sp, #16
 8002e46:	f000 f91f 	bl	8003088 <_printf_i>
 8002e4a:	e7ed      	b.n	8002e28 <_svfiprintf_r+0x1c0>
 8002e4c:	080034fe 	.word	0x080034fe
 8002e50:	08003504 	.word	0x08003504
 8002e54:	08003508 	.word	0x08003508
 8002e58:	00000000 	.word	0x00000000
 8002e5c:	08002bb1 	.word	0x08002bb1

08002e60 <sbrk_aligned>:
 8002e60:	b570      	push	{r4, r5, r6, lr}
 8002e62:	4e0f      	ldr	r6, [pc, #60]	@ (8002ea0 <sbrk_aligned+0x40>)
 8002e64:	460c      	mov	r4, r1
 8002e66:	6831      	ldr	r1, [r6, #0]
 8002e68:	4605      	mov	r5, r0
 8002e6a:	b911      	cbnz	r1, 8002e72 <sbrk_aligned+0x12>
 8002e6c:	f000 fa80 	bl	8003370 <_sbrk_r>
 8002e70:	6030      	str	r0, [r6, #0]
 8002e72:	4621      	mov	r1, r4
 8002e74:	4628      	mov	r0, r5
 8002e76:	f000 fa7b 	bl	8003370 <_sbrk_r>
 8002e7a:	1c43      	adds	r3, r0, #1
 8002e7c:	d103      	bne.n	8002e86 <sbrk_aligned+0x26>
 8002e7e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002e82:	4620      	mov	r0, r4
 8002e84:	bd70      	pop	{r4, r5, r6, pc}
 8002e86:	1cc4      	adds	r4, r0, #3
 8002e88:	f024 0403 	bic.w	r4, r4, #3
 8002e8c:	42a0      	cmp	r0, r4
 8002e8e:	d0f8      	beq.n	8002e82 <sbrk_aligned+0x22>
 8002e90:	1a21      	subs	r1, r4, r0
 8002e92:	4628      	mov	r0, r5
 8002e94:	f000 fa6c 	bl	8003370 <_sbrk_r>
 8002e98:	3001      	adds	r0, #1
 8002e9a:	d1f2      	bne.n	8002e82 <sbrk_aligned+0x22>
 8002e9c:	e7ef      	b.n	8002e7e <sbrk_aligned+0x1e>
 8002e9e:	bf00      	nop
 8002ea0:	20000230 	.word	0x20000230

08002ea4 <_malloc_r>:
 8002ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ea8:	1ccd      	adds	r5, r1, #3
 8002eaa:	f025 0503 	bic.w	r5, r5, #3
 8002eae:	3508      	adds	r5, #8
 8002eb0:	2d0c      	cmp	r5, #12
 8002eb2:	bf38      	it	cc
 8002eb4:	250c      	movcc	r5, #12
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	4606      	mov	r6, r0
 8002eba:	db01      	blt.n	8002ec0 <_malloc_r+0x1c>
 8002ebc:	42a9      	cmp	r1, r5
 8002ebe:	d904      	bls.n	8002eca <_malloc_r+0x26>
 8002ec0:	230c      	movs	r3, #12
 8002ec2:	6033      	str	r3, [r6, #0]
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002eca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002fa0 <_malloc_r+0xfc>
 8002ece:	f000 f9fb 	bl	80032c8 <__malloc_lock>
 8002ed2:	f8d8 3000 	ldr.w	r3, [r8]
 8002ed6:	461c      	mov	r4, r3
 8002ed8:	bb44      	cbnz	r4, 8002f2c <_malloc_r+0x88>
 8002eda:	4629      	mov	r1, r5
 8002edc:	4630      	mov	r0, r6
 8002ede:	f7ff ffbf 	bl	8002e60 <sbrk_aligned>
 8002ee2:	1c43      	adds	r3, r0, #1
 8002ee4:	4604      	mov	r4, r0
 8002ee6:	d158      	bne.n	8002f9a <_malloc_r+0xf6>
 8002ee8:	f8d8 4000 	ldr.w	r4, [r8]
 8002eec:	4627      	mov	r7, r4
 8002eee:	2f00      	cmp	r7, #0
 8002ef0:	d143      	bne.n	8002f7a <_malloc_r+0xd6>
 8002ef2:	2c00      	cmp	r4, #0
 8002ef4:	d04b      	beq.n	8002f8e <_malloc_r+0xea>
 8002ef6:	6823      	ldr	r3, [r4, #0]
 8002ef8:	4639      	mov	r1, r7
 8002efa:	4630      	mov	r0, r6
 8002efc:	eb04 0903 	add.w	r9, r4, r3
 8002f00:	f000 fa36 	bl	8003370 <_sbrk_r>
 8002f04:	4581      	cmp	r9, r0
 8002f06:	d142      	bne.n	8002f8e <_malloc_r+0xea>
 8002f08:	6821      	ldr	r1, [r4, #0]
 8002f0a:	4630      	mov	r0, r6
 8002f0c:	1a6d      	subs	r5, r5, r1
 8002f0e:	4629      	mov	r1, r5
 8002f10:	f7ff ffa6 	bl	8002e60 <sbrk_aligned>
 8002f14:	3001      	adds	r0, #1
 8002f16:	d03a      	beq.n	8002f8e <_malloc_r+0xea>
 8002f18:	6823      	ldr	r3, [r4, #0]
 8002f1a:	442b      	add	r3, r5
 8002f1c:	6023      	str	r3, [r4, #0]
 8002f1e:	f8d8 3000 	ldr.w	r3, [r8]
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	bb62      	cbnz	r2, 8002f80 <_malloc_r+0xdc>
 8002f26:	f8c8 7000 	str.w	r7, [r8]
 8002f2a:	e00f      	b.n	8002f4c <_malloc_r+0xa8>
 8002f2c:	6822      	ldr	r2, [r4, #0]
 8002f2e:	1b52      	subs	r2, r2, r5
 8002f30:	d420      	bmi.n	8002f74 <_malloc_r+0xd0>
 8002f32:	2a0b      	cmp	r2, #11
 8002f34:	d917      	bls.n	8002f66 <_malloc_r+0xc2>
 8002f36:	1961      	adds	r1, r4, r5
 8002f38:	42a3      	cmp	r3, r4
 8002f3a:	6025      	str	r5, [r4, #0]
 8002f3c:	bf18      	it	ne
 8002f3e:	6059      	strne	r1, [r3, #4]
 8002f40:	6863      	ldr	r3, [r4, #4]
 8002f42:	bf08      	it	eq
 8002f44:	f8c8 1000 	streq.w	r1, [r8]
 8002f48:	5162      	str	r2, [r4, r5]
 8002f4a:	604b      	str	r3, [r1, #4]
 8002f4c:	4630      	mov	r0, r6
 8002f4e:	f000 f9c1 	bl	80032d4 <__malloc_unlock>
 8002f52:	f104 000b 	add.w	r0, r4, #11
 8002f56:	1d23      	adds	r3, r4, #4
 8002f58:	f020 0007 	bic.w	r0, r0, #7
 8002f5c:	1ac2      	subs	r2, r0, r3
 8002f5e:	bf1c      	itt	ne
 8002f60:	1a1b      	subne	r3, r3, r0
 8002f62:	50a3      	strne	r3, [r4, r2]
 8002f64:	e7af      	b.n	8002ec6 <_malloc_r+0x22>
 8002f66:	6862      	ldr	r2, [r4, #4]
 8002f68:	42a3      	cmp	r3, r4
 8002f6a:	bf0c      	ite	eq
 8002f6c:	f8c8 2000 	streq.w	r2, [r8]
 8002f70:	605a      	strne	r2, [r3, #4]
 8002f72:	e7eb      	b.n	8002f4c <_malloc_r+0xa8>
 8002f74:	4623      	mov	r3, r4
 8002f76:	6864      	ldr	r4, [r4, #4]
 8002f78:	e7ae      	b.n	8002ed8 <_malloc_r+0x34>
 8002f7a:	463c      	mov	r4, r7
 8002f7c:	687f      	ldr	r7, [r7, #4]
 8002f7e:	e7b6      	b.n	8002eee <_malloc_r+0x4a>
 8002f80:	461a      	mov	r2, r3
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	42a3      	cmp	r3, r4
 8002f86:	d1fb      	bne.n	8002f80 <_malloc_r+0xdc>
 8002f88:	2300      	movs	r3, #0
 8002f8a:	6053      	str	r3, [r2, #4]
 8002f8c:	e7de      	b.n	8002f4c <_malloc_r+0xa8>
 8002f8e:	230c      	movs	r3, #12
 8002f90:	4630      	mov	r0, r6
 8002f92:	6033      	str	r3, [r6, #0]
 8002f94:	f000 f99e 	bl	80032d4 <__malloc_unlock>
 8002f98:	e794      	b.n	8002ec4 <_malloc_r+0x20>
 8002f9a:	6005      	str	r5, [r0, #0]
 8002f9c:	e7d6      	b.n	8002f4c <_malloc_r+0xa8>
 8002f9e:	bf00      	nop
 8002fa0:	20000234 	.word	0x20000234

08002fa4 <_printf_common>:
 8002fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fa8:	4616      	mov	r6, r2
 8002faa:	4698      	mov	r8, r3
 8002fac:	688a      	ldr	r2, [r1, #8]
 8002fae:	690b      	ldr	r3, [r1, #16]
 8002fb0:	4607      	mov	r7, r0
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	bfb8      	it	lt
 8002fb6:	4613      	movlt	r3, r2
 8002fb8:	6033      	str	r3, [r6, #0]
 8002fba:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002fbe:	460c      	mov	r4, r1
 8002fc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002fc4:	b10a      	cbz	r2, 8002fca <_printf_common+0x26>
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	6033      	str	r3, [r6, #0]
 8002fca:	6823      	ldr	r3, [r4, #0]
 8002fcc:	0699      	lsls	r1, r3, #26
 8002fce:	bf42      	ittt	mi
 8002fd0:	6833      	ldrmi	r3, [r6, #0]
 8002fd2:	3302      	addmi	r3, #2
 8002fd4:	6033      	strmi	r3, [r6, #0]
 8002fd6:	6825      	ldr	r5, [r4, #0]
 8002fd8:	f015 0506 	ands.w	r5, r5, #6
 8002fdc:	d106      	bne.n	8002fec <_printf_common+0x48>
 8002fde:	f104 0a19 	add.w	sl, r4, #25
 8002fe2:	68e3      	ldr	r3, [r4, #12]
 8002fe4:	6832      	ldr	r2, [r6, #0]
 8002fe6:	1a9b      	subs	r3, r3, r2
 8002fe8:	42ab      	cmp	r3, r5
 8002fea:	dc2b      	bgt.n	8003044 <_printf_common+0xa0>
 8002fec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002ff0:	6822      	ldr	r2, [r4, #0]
 8002ff2:	3b00      	subs	r3, #0
 8002ff4:	bf18      	it	ne
 8002ff6:	2301      	movne	r3, #1
 8002ff8:	0692      	lsls	r2, r2, #26
 8002ffa:	d430      	bmi.n	800305e <_printf_common+0xba>
 8002ffc:	4641      	mov	r1, r8
 8002ffe:	4638      	mov	r0, r7
 8003000:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003004:	47c8      	blx	r9
 8003006:	3001      	adds	r0, #1
 8003008:	d023      	beq.n	8003052 <_printf_common+0xae>
 800300a:	6823      	ldr	r3, [r4, #0]
 800300c:	6922      	ldr	r2, [r4, #16]
 800300e:	f003 0306 	and.w	r3, r3, #6
 8003012:	2b04      	cmp	r3, #4
 8003014:	bf14      	ite	ne
 8003016:	2500      	movne	r5, #0
 8003018:	6833      	ldreq	r3, [r6, #0]
 800301a:	f04f 0600 	mov.w	r6, #0
 800301e:	bf08      	it	eq
 8003020:	68e5      	ldreq	r5, [r4, #12]
 8003022:	f104 041a 	add.w	r4, r4, #26
 8003026:	bf08      	it	eq
 8003028:	1aed      	subeq	r5, r5, r3
 800302a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800302e:	bf08      	it	eq
 8003030:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003034:	4293      	cmp	r3, r2
 8003036:	bfc4      	itt	gt
 8003038:	1a9b      	subgt	r3, r3, r2
 800303a:	18ed      	addgt	r5, r5, r3
 800303c:	42b5      	cmp	r5, r6
 800303e:	d11a      	bne.n	8003076 <_printf_common+0xd2>
 8003040:	2000      	movs	r0, #0
 8003042:	e008      	b.n	8003056 <_printf_common+0xb2>
 8003044:	2301      	movs	r3, #1
 8003046:	4652      	mov	r2, sl
 8003048:	4641      	mov	r1, r8
 800304a:	4638      	mov	r0, r7
 800304c:	47c8      	blx	r9
 800304e:	3001      	adds	r0, #1
 8003050:	d103      	bne.n	800305a <_printf_common+0xb6>
 8003052:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800305a:	3501      	adds	r5, #1
 800305c:	e7c1      	b.n	8002fe2 <_printf_common+0x3e>
 800305e:	2030      	movs	r0, #48	@ 0x30
 8003060:	18e1      	adds	r1, r4, r3
 8003062:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003066:	1c5a      	adds	r2, r3, #1
 8003068:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800306c:	4422      	add	r2, r4
 800306e:	3302      	adds	r3, #2
 8003070:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003074:	e7c2      	b.n	8002ffc <_printf_common+0x58>
 8003076:	2301      	movs	r3, #1
 8003078:	4622      	mov	r2, r4
 800307a:	4641      	mov	r1, r8
 800307c:	4638      	mov	r0, r7
 800307e:	47c8      	blx	r9
 8003080:	3001      	adds	r0, #1
 8003082:	d0e6      	beq.n	8003052 <_printf_common+0xae>
 8003084:	3601      	adds	r6, #1
 8003086:	e7d9      	b.n	800303c <_printf_common+0x98>

08003088 <_printf_i>:
 8003088:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800308c:	7e0f      	ldrb	r7, [r1, #24]
 800308e:	4691      	mov	r9, r2
 8003090:	2f78      	cmp	r7, #120	@ 0x78
 8003092:	4680      	mov	r8, r0
 8003094:	460c      	mov	r4, r1
 8003096:	469a      	mov	sl, r3
 8003098:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800309a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800309e:	d807      	bhi.n	80030b0 <_printf_i+0x28>
 80030a0:	2f62      	cmp	r7, #98	@ 0x62
 80030a2:	d80a      	bhi.n	80030ba <_printf_i+0x32>
 80030a4:	2f00      	cmp	r7, #0
 80030a6:	f000 80d3 	beq.w	8003250 <_printf_i+0x1c8>
 80030aa:	2f58      	cmp	r7, #88	@ 0x58
 80030ac:	f000 80ba 	beq.w	8003224 <_printf_i+0x19c>
 80030b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80030b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80030b8:	e03a      	b.n	8003130 <_printf_i+0xa8>
 80030ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80030be:	2b15      	cmp	r3, #21
 80030c0:	d8f6      	bhi.n	80030b0 <_printf_i+0x28>
 80030c2:	a101      	add	r1, pc, #4	@ (adr r1, 80030c8 <_printf_i+0x40>)
 80030c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80030c8:	08003121 	.word	0x08003121
 80030cc:	08003135 	.word	0x08003135
 80030d0:	080030b1 	.word	0x080030b1
 80030d4:	080030b1 	.word	0x080030b1
 80030d8:	080030b1 	.word	0x080030b1
 80030dc:	080030b1 	.word	0x080030b1
 80030e0:	08003135 	.word	0x08003135
 80030e4:	080030b1 	.word	0x080030b1
 80030e8:	080030b1 	.word	0x080030b1
 80030ec:	080030b1 	.word	0x080030b1
 80030f0:	080030b1 	.word	0x080030b1
 80030f4:	08003237 	.word	0x08003237
 80030f8:	0800315f 	.word	0x0800315f
 80030fc:	080031f1 	.word	0x080031f1
 8003100:	080030b1 	.word	0x080030b1
 8003104:	080030b1 	.word	0x080030b1
 8003108:	08003259 	.word	0x08003259
 800310c:	080030b1 	.word	0x080030b1
 8003110:	0800315f 	.word	0x0800315f
 8003114:	080030b1 	.word	0x080030b1
 8003118:	080030b1 	.word	0x080030b1
 800311c:	080031f9 	.word	0x080031f9
 8003120:	6833      	ldr	r3, [r6, #0]
 8003122:	1d1a      	adds	r2, r3, #4
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6032      	str	r2, [r6, #0]
 8003128:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800312c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003130:	2301      	movs	r3, #1
 8003132:	e09e      	b.n	8003272 <_printf_i+0x1ea>
 8003134:	6833      	ldr	r3, [r6, #0]
 8003136:	6820      	ldr	r0, [r4, #0]
 8003138:	1d19      	adds	r1, r3, #4
 800313a:	6031      	str	r1, [r6, #0]
 800313c:	0606      	lsls	r6, r0, #24
 800313e:	d501      	bpl.n	8003144 <_printf_i+0xbc>
 8003140:	681d      	ldr	r5, [r3, #0]
 8003142:	e003      	b.n	800314c <_printf_i+0xc4>
 8003144:	0645      	lsls	r5, r0, #25
 8003146:	d5fb      	bpl.n	8003140 <_printf_i+0xb8>
 8003148:	f9b3 5000 	ldrsh.w	r5, [r3]
 800314c:	2d00      	cmp	r5, #0
 800314e:	da03      	bge.n	8003158 <_printf_i+0xd0>
 8003150:	232d      	movs	r3, #45	@ 0x2d
 8003152:	426d      	negs	r5, r5
 8003154:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003158:	230a      	movs	r3, #10
 800315a:	4859      	ldr	r0, [pc, #356]	@ (80032c0 <_printf_i+0x238>)
 800315c:	e011      	b.n	8003182 <_printf_i+0xfa>
 800315e:	6821      	ldr	r1, [r4, #0]
 8003160:	6833      	ldr	r3, [r6, #0]
 8003162:	0608      	lsls	r0, r1, #24
 8003164:	f853 5b04 	ldr.w	r5, [r3], #4
 8003168:	d402      	bmi.n	8003170 <_printf_i+0xe8>
 800316a:	0649      	lsls	r1, r1, #25
 800316c:	bf48      	it	mi
 800316e:	b2ad      	uxthmi	r5, r5
 8003170:	2f6f      	cmp	r7, #111	@ 0x6f
 8003172:	6033      	str	r3, [r6, #0]
 8003174:	bf14      	ite	ne
 8003176:	230a      	movne	r3, #10
 8003178:	2308      	moveq	r3, #8
 800317a:	4851      	ldr	r0, [pc, #324]	@ (80032c0 <_printf_i+0x238>)
 800317c:	2100      	movs	r1, #0
 800317e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003182:	6866      	ldr	r6, [r4, #4]
 8003184:	2e00      	cmp	r6, #0
 8003186:	bfa8      	it	ge
 8003188:	6821      	ldrge	r1, [r4, #0]
 800318a:	60a6      	str	r6, [r4, #8]
 800318c:	bfa4      	itt	ge
 800318e:	f021 0104 	bicge.w	r1, r1, #4
 8003192:	6021      	strge	r1, [r4, #0]
 8003194:	b90d      	cbnz	r5, 800319a <_printf_i+0x112>
 8003196:	2e00      	cmp	r6, #0
 8003198:	d04b      	beq.n	8003232 <_printf_i+0x1aa>
 800319a:	4616      	mov	r6, r2
 800319c:	fbb5 f1f3 	udiv	r1, r5, r3
 80031a0:	fb03 5711 	mls	r7, r3, r1, r5
 80031a4:	5dc7      	ldrb	r7, [r0, r7]
 80031a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80031aa:	462f      	mov	r7, r5
 80031ac:	42bb      	cmp	r3, r7
 80031ae:	460d      	mov	r5, r1
 80031b0:	d9f4      	bls.n	800319c <_printf_i+0x114>
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	d10b      	bne.n	80031ce <_printf_i+0x146>
 80031b6:	6823      	ldr	r3, [r4, #0]
 80031b8:	07df      	lsls	r7, r3, #31
 80031ba:	d508      	bpl.n	80031ce <_printf_i+0x146>
 80031bc:	6923      	ldr	r3, [r4, #16]
 80031be:	6861      	ldr	r1, [r4, #4]
 80031c0:	4299      	cmp	r1, r3
 80031c2:	bfde      	ittt	le
 80031c4:	2330      	movle	r3, #48	@ 0x30
 80031c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80031ca:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80031ce:	1b92      	subs	r2, r2, r6
 80031d0:	6122      	str	r2, [r4, #16]
 80031d2:	464b      	mov	r3, r9
 80031d4:	4621      	mov	r1, r4
 80031d6:	4640      	mov	r0, r8
 80031d8:	f8cd a000 	str.w	sl, [sp]
 80031dc:	aa03      	add	r2, sp, #12
 80031de:	f7ff fee1 	bl	8002fa4 <_printf_common>
 80031e2:	3001      	adds	r0, #1
 80031e4:	d14a      	bne.n	800327c <_printf_i+0x1f4>
 80031e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80031ea:	b004      	add	sp, #16
 80031ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031f0:	6823      	ldr	r3, [r4, #0]
 80031f2:	f043 0320 	orr.w	r3, r3, #32
 80031f6:	6023      	str	r3, [r4, #0]
 80031f8:	2778      	movs	r7, #120	@ 0x78
 80031fa:	4832      	ldr	r0, [pc, #200]	@ (80032c4 <_printf_i+0x23c>)
 80031fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003200:	6823      	ldr	r3, [r4, #0]
 8003202:	6831      	ldr	r1, [r6, #0]
 8003204:	061f      	lsls	r7, r3, #24
 8003206:	f851 5b04 	ldr.w	r5, [r1], #4
 800320a:	d402      	bmi.n	8003212 <_printf_i+0x18a>
 800320c:	065f      	lsls	r7, r3, #25
 800320e:	bf48      	it	mi
 8003210:	b2ad      	uxthmi	r5, r5
 8003212:	6031      	str	r1, [r6, #0]
 8003214:	07d9      	lsls	r1, r3, #31
 8003216:	bf44      	itt	mi
 8003218:	f043 0320 	orrmi.w	r3, r3, #32
 800321c:	6023      	strmi	r3, [r4, #0]
 800321e:	b11d      	cbz	r5, 8003228 <_printf_i+0x1a0>
 8003220:	2310      	movs	r3, #16
 8003222:	e7ab      	b.n	800317c <_printf_i+0xf4>
 8003224:	4826      	ldr	r0, [pc, #152]	@ (80032c0 <_printf_i+0x238>)
 8003226:	e7e9      	b.n	80031fc <_printf_i+0x174>
 8003228:	6823      	ldr	r3, [r4, #0]
 800322a:	f023 0320 	bic.w	r3, r3, #32
 800322e:	6023      	str	r3, [r4, #0]
 8003230:	e7f6      	b.n	8003220 <_printf_i+0x198>
 8003232:	4616      	mov	r6, r2
 8003234:	e7bd      	b.n	80031b2 <_printf_i+0x12a>
 8003236:	6833      	ldr	r3, [r6, #0]
 8003238:	6825      	ldr	r5, [r4, #0]
 800323a:	1d18      	adds	r0, r3, #4
 800323c:	6961      	ldr	r1, [r4, #20]
 800323e:	6030      	str	r0, [r6, #0]
 8003240:	062e      	lsls	r6, r5, #24
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	d501      	bpl.n	800324a <_printf_i+0x1c2>
 8003246:	6019      	str	r1, [r3, #0]
 8003248:	e002      	b.n	8003250 <_printf_i+0x1c8>
 800324a:	0668      	lsls	r0, r5, #25
 800324c:	d5fb      	bpl.n	8003246 <_printf_i+0x1be>
 800324e:	8019      	strh	r1, [r3, #0]
 8003250:	2300      	movs	r3, #0
 8003252:	4616      	mov	r6, r2
 8003254:	6123      	str	r3, [r4, #16]
 8003256:	e7bc      	b.n	80031d2 <_printf_i+0x14a>
 8003258:	6833      	ldr	r3, [r6, #0]
 800325a:	2100      	movs	r1, #0
 800325c:	1d1a      	adds	r2, r3, #4
 800325e:	6032      	str	r2, [r6, #0]
 8003260:	681e      	ldr	r6, [r3, #0]
 8003262:	6862      	ldr	r2, [r4, #4]
 8003264:	4630      	mov	r0, r6
 8003266:	f000 f893 	bl	8003390 <memchr>
 800326a:	b108      	cbz	r0, 8003270 <_printf_i+0x1e8>
 800326c:	1b80      	subs	r0, r0, r6
 800326e:	6060      	str	r0, [r4, #4]
 8003270:	6863      	ldr	r3, [r4, #4]
 8003272:	6123      	str	r3, [r4, #16]
 8003274:	2300      	movs	r3, #0
 8003276:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800327a:	e7aa      	b.n	80031d2 <_printf_i+0x14a>
 800327c:	4632      	mov	r2, r6
 800327e:	4649      	mov	r1, r9
 8003280:	4640      	mov	r0, r8
 8003282:	6923      	ldr	r3, [r4, #16]
 8003284:	47d0      	blx	sl
 8003286:	3001      	adds	r0, #1
 8003288:	d0ad      	beq.n	80031e6 <_printf_i+0x15e>
 800328a:	6823      	ldr	r3, [r4, #0]
 800328c:	079b      	lsls	r3, r3, #30
 800328e:	d413      	bmi.n	80032b8 <_printf_i+0x230>
 8003290:	68e0      	ldr	r0, [r4, #12]
 8003292:	9b03      	ldr	r3, [sp, #12]
 8003294:	4298      	cmp	r0, r3
 8003296:	bfb8      	it	lt
 8003298:	4618      	movlt	r0, r3
 800329a:	e7a6      	b.n	80031ea <_printf_i+0x162>
 800329c:	2301      	movs	r3, #1
 800329e:	4632      	mov	r2, r6
 80032a0:	4649      	mov	r1, r9
 80032a2:	4640      	mov	r0, r8
 80032a4:	47d0      	blx	sl
 80032a6:	3001      	adds	r0, #1
 80032a8:	d09d      	beq.n	80031e6 <_printf_i+0x15e>
 80032aa:	3501      	adds	r5, #1
 80032ac:	68e3      	ldr	r3, [r4, #12]
 80032ae:	9903      	ldr	r1, [sp, #12]
 80032b0:	1a5b      	subs	r3, r3, r1
 80032b2:	42ab      	cmp	r3, r5
 80032b4:	dcf2      	bgt.n	800329c <_printf_i+0x214>
 80032b6:	e7eb      	b.n	8003290 <_printf_i+0x208>
 80032b8:	2500      	movs	r5, #0
 80032ba:	f104 0619 	add.w	r6, r4, #25
 80032be:	e7f5      	b.n	80032ac <_printf_i+0x224>
 80032c0:	0800350f 	.word	0x0800350f
 80032c4:	08003520 	.word	0x08003520

080032c8 <__malloc_lock>:
 80032c8:	4801      	ldr	r0, [pc, #4]	@ (80032d0 <__malloc_lock+0x8>)
 80032ca:	f7ff bc6f 	b.w	8002bac <__retarget_lock_acquire_recursive>
 80032ce:	bf00      	nop
 80032d0:	2000022c 	.word	0x2000022c

080032d4 <__malloc_unlock>:
 80032d4:	4801      	ldr	r0, [pc, #4]	@ (80032dc <__malloc_unlock+0x8>)
 80032d6:	f7ff bc6a 	b.w	8002bae <__retarget_lock_release_recursive>
 80032da:	bf00      	nop
 80032dc:	2000022c 	.word	0x2000022c

080032e0 <_realloc_r>:
 80032e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032e4:	4680      	mov	r8, r0
 80032e6:	4615      	mov	r5, r2
 80032e8:	460c      	mov	r4, r1
 80032ea:	b921      	cbnz	r1, 80032f6 <_realloc_r+0x16>
 80032ec:	4611      	mov	r1, r2
 80032ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032f2:	f7ff bdd7 	b.w	8002ea4 <_malloc_r>
 80032f6:	b92a      	cbnz	r2, 8003304 <_realloc_r+0x24>
 80032f8:	f000 f866 	bl	80033c8 <_free_r>
 80032fc:	2400      	movs	r4, #0
 80032fe:	4620      	mov	r0, r4
 8003300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003304:	f000 f8a8 	bl	8003458 <_malloc_usable_size_r>
 8003308:	4285      	cmp	r5, r0
 800330a:	4606      	mov	r6, r0
 800330c:	d802      	bhi.n	8003314 <_realloc_r+0x34>
 800330e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003312:	d8f4      	bhi.n	80032fe <_realloc_r+0x1e>
 8003314:	4629      	mov	r1, r5
 8003316:	4640      	mov	r0, r8
 8003318:	f7ff fdc4 	bl	8002ea4 <_malloc_r>
 800331c:	4607      	mov	r7, r0
 800331e:	2800      	cmp	r0, #0
 8003320:	d0ec      	beq.n	80032fc <_realloc_r+0x1c>
 8003322:	42b5      	cmp	r5, r6
 8003324:	462a      	mov	r2, r5
 8003326:	4621      	mov	r1, r4
 8003328:	bf28      	it	cs
 800332a:	4632      	movcs	r2, r6
 800332c:	f000 f83e 	bl	80033ac <memcpy>
 8003330:	4621      	mov	r1, r4
 8003332:	4640      	mov	r0, r8
 8003334:	f000 f848 	bl	80033c8 <_free_r>
 8003338:	463c      	mov	r4, r7
 800333a:	e7e0      	b.n	80032fe <_realloc_r+0x1e>

0800333c <memmove>:
 800333c:	4288      	cmp	r0, r1
 800333e:	b510      	push	{r4, lr}
 8003340:	eb01 0402 	add.w	r4, r1, r2
 8003344:	d902      	bls.n	800334c <memmove+0x10>
 8003346:	4284      	cmp	r4, r0
 8003348:	4623      	mov	r3, r4
 800334a:	d807      	bhi.n	800335c <memmove+0x20>
 800334c:	1e43      	subs	r3, r0, #1
 800334e:	42a1      	cmp	r1, r4
 8003350:	d008      	beq.n	8003364 <memmove+0x28>
 8003352:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003356:	f803 2f01 	strb.w	r2, [r3, #1]!
 800335a:	e7f8      	b.n	800334e <memmove+0x12>
 800335c:	4601      	mov	r1, r0
 800335e:	4402      	add	r2, r0
 8003360:	428a      	cmp	r2, r1
 8003362:	d100      	bne.n	8003366 <memmove+0x2a>
 8003364:	bd10      	pop	{r4, pc}
 8003366:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800336a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800336e:	e7f7      	b.n	8003360 <memmove+0x24>

08003370 <_sbrk_r>:
 8003370:	b538      	push	{r3, r4, r5, lr}
 8003372:	2300      	movs	r3, #0
 8003374:	4d05      	ldr	r5, [pc, #20]	@ (800338c <_sbrk_r+0x1c>)
 8003376:	4604      	mov	r4, r0
 8003378:	4608      	mov	r0, r1
 800337a:	602b      	str	r3, [r5, #0]
 800337c:	f7fd fc18 	bl	8000bb0 <_sbrk>
 8003380:	1c43      	adds	r3, r0, #1
 8003382:	d102      	bne.n	800338a <_sbrk_r+0x1a>
 8003384:	682b      	ldr	r3, [r5, #0]
 8003386:	b103      	cbz	r3, 800338a <_sbrk_r+0x1a>
 8003388:	6023      	str	r3, [r4, #0]
 800338a:	bd38      	pop	{r3, r4, r5, pc}
 800338c:	20000238 	.word	0x20000238

08003390 <memchr>:
 8003390:	4603      	mov	r3, r0
 8003392:	b510      	push	{r4, lr}
 8003394:	b2c9      	uxtb	r1, r1
 8003396:	4402      	add	r2, r0
 8003398:	4293      	cmp	r3, r2
 800339a:	4618      	mov	r0, r3
 800339c:	d101      	bne.n	80033a2 <memchr+0x12>
 800339e:	2000      	movs	r0, #0
 80033a0:	e003      	b.n	80033aa <memchr+0x1a>
 80033a2:	7804      	ldrb	r4, [r0, #0]
 80033a4:	3301      	adds	r3, #1
 80033a6:	428c      	cmp	r4, r1
 80033a8:	d1f6      	bne.n	8003398 <memchr+0x8>
 80033aa:	bd10      	pop	{r4, pc}

080033ac <memcpy>:
 80033ac:	440a      	add	r2, r1
 80033ae:	4291      	cmp	r1, r2
 80033b0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80033b4:	d100      	bne.n	80033b8 <memcpy+0xc>
 80033b6:	4770      	bx	lr
 80033b8:	b510      	push	{r4, lr}
 80033ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033be:	4291      	cmp	r1, r2
 80033c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033c4:	d1f9      	bne.n	80033ba <memcpy+0xe>
 80033c6:	bd10      	pop	{r4, pc}

080033c8 <_free_r>:
 80033c8:	b538      	push	{r3, r4, r5, lr}
 80033ca:	4605      	mov	r5, r0
 80033cc:	2900      	cmp	r1, #0
 80033ce:	d040      	beq.n	8003452 <_free_r+0x8a>
 80033d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033d4:	1f0c      	subs	r4, r1, #4
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	bfb8      	it	lt
 80033da:	18e4      	addlt	r4, r4, r3
 80033dc:	f7ff ff74 	bl	80032c8 <__malloc_lock>
 80033e0:	4a1c      	ldr	r2, [pc, #112]	@ (8003454 <_free_r+0x8c>)
 80033e2:	6813      	ldr	r3, [r2, #0]
 80033e4:	b933      	cbnz	r3, 80033f4 <_free_r+0x2c>
 80033e6:	6063      	str	r3, [r4, #4]
 80033e8:	6014      	str	r4, [r2, #0]
 80033ea:	4628      	mov	r0, r5
 80033ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033f0:	f7ff bf70 	b.w	80032d4 <__malloc_unlock>
 80033f4:	42a3      	cmp	r3, r4
 80033f6:	d908      	bls.n	800340a <_free_r+0x42>
 80033f8:	6820      	ldr	r0, [r4, #0]
 80033fa:	1821      	adds	r1, r4, r0
 80033fc:	428b      	cmp	r3, r1
 80033fe:	bf01      	itttt	eq
 8003400:	6819      	ldreq	r1, [r3, #0]
 8003402:	685b      	ldreq	r3, [r3, #4]
 8003404:	1809      	addeq	r1, r1, r0
 8003406:	6021      	streq	r1, [r4, #0]
 8003408:	e7ed      	b.n	80033e6 <_free_r+0x1e>
 800340a:	461a      	mov	r2, r3
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	b10b      	cbz	r3, 8003414 <_free_r+0x4c>
 8003410:	42a3      	cmp	r3, r4
 8003412:	d9fa      	bls.n	800340a <_free_r+0x42>
 8003414:	6811      	ldr	r1, [r2, #0]
 8003416:	1850      	adds	r0, r2, r1
 8003418:	42a0      	cmp	r0, r4
 800341a:	d10b      	bne.n	8003434 <_free_r+0x6c>
 800341c:	6820      	ldr	r0, [r4, #0]
 800341e:	4401      	add	r1, r0
 8003420:	1850      	adds	r0, r2, r1
 8003422:	4283      	cmp	r3, r0
 8003424:	6011      	str	r1, [r2, #0]
 8003426:	d1e0      	bne.n	80033ea <_free_r+0x22>
 8003428:	6818      	ldr	r0, [r3, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	4408      	add	r0, r1
 800342e:	6010      	str	r0, [r2, #0]
 8003430:	6053      	str	r3, [r2, #4]
 8003432:	e7da      	b.n	80033ea <_free_r+0x22>
 8003434:	d902      	bls.n	800343c <_free_r+0x74>
 8003436:	230c      	movs	r3, #12
 8003438:	602b      	str	r3, [r5, #0]
 800343a:	e7d6      	b.n	80033ea <_free_r+0x22>
 800343c:	6820      	ldr	r0, [r4, #0]
 800343e:	1821      	adds	r1, r4, r0
 8003440:	428b      	cmp	r3, r1
 8003442:	bf01      	itttt	eq
 8003444:	6819      	ldreq	r1, [r3, #0]
 8003446:	685b      	ldreq	r3, [r3, #4]
 8003448:	1809      	addeq	r1, r1, r0
 800344a:	6021      	streq	r1, [r4, #0]
 800344c:	6063      	str	r3, [r4, #4]
 800344e:	6054      	str	r4, [r2, #4]
 8003450:	e7cb      	b.n	80033ea <_free_r+0x22>
 8003452:	bd38      	pop	{r3, r4, r5, pc}
 8003454:	20000234 	.word	0x20000234

08003458 <_malloc_usable_size_r>:
 8003458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800345c:	1f18      	subs	r0, r3, #4
 800345e:	2b00      	cmp	r3, #0
 8003460:	bfbc      	itt	lt
 8003462:	580b      	ldrlt	r3, [r1, r0]
 8003464:	18c0      	addlt	r0, r0, r3
 8003466:	4770      	bx	lr

08003468 <_init>:
 8003468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800346a:	bf00      	nop
 800346c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800346e:	bc08      	pop	{r3}
 8003470:	469e      	mov	lr, r3
 8003472:	4770      	bx	lr

08003474 <_fini>:
 8003474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003476:	bf00      	nop
 8003478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800347a:	bc08      	pop	{r3}
 800347c:	469e      	mov	lr, r3
 800347e:	4770      	bx	lr
